Search.setIndex({"docnames": ["CBD", "CBD.Core", "CBD.converters", "CBD.converters.CBD2C", "CBD.converters.CBDDraw", "CBD.converters.eq2CBD", "CBD.converters.hybrid", "CBD.converters.latexify", "CBD.converters.latexify.CBD2Latex", "CBD.converters.latexify.functions", "CBD.depGraph", "CBD.lib", "CBD.lib.endpoints", "CBD.lib.ev3", "CBD.lib.extra", "CBD.lib.io", "CBD.lib.std", "CBD.loopsolvers", "CBD.loopsolvers.linearsolver", "CBD.loopsolvers.solver", "CBD.loopsolvers.sympysolver", "CBD.naivelog", "CBD.preprocessing", "CBD.preprocessing.butcher", "CBD.preprocessing.rungekutta", "CBD.realtime", "CBD.realtime.accurate_time", "CBD.realtime.plotting", "CBD.realtime.threadingBackend", "CBD.realtime.threadingGameLoop", "CBD.realtime.threadingGameLoopAlt", "CBD.realtime.threadingPython", "CBD.realtime.threadingTkInter", "CBD.scheduling", "CBD.simulator", "CBD.state_events", "CBD.state_events.locators", "CBD.tracers", "CBD.tracers.baseTracer", "CBD.tracers.color", "CBD.tracers.tracerVerbose", "CBD.util", "changelog", "examples/ContinuousTime", "examples/Dashboard", "examples/EvenNumberGen", "examples/Fibonacci", "examples/LCG", "examples/LivePlot", "examples/RealTime", "examples/SinGen", "index", "install", "issues", "pyCBD", "pyCBD.Core", "pyCBD.converters", "pyCBD.converters.CBD2C", "pyCBD.converters.CBDDraw", "pyCBD.converters.eq2CBD", "pyCBD.converters.hybrid", "pyCBD.converters.latexify", "pyCBD.converters.latexify.CBD2Latex", "pyCBD.converters.latexify.functions", "pyCBD.depGraph", "pyCBD.lib", "pyCBD.lib.endpoints", "pyCBD.lib.ev3", "pyCBD.lib.extra", "pyCBD.lib.io", "pyCBD.lib.std", "pyCBD.loopsolvers", "pyCBD.loopsolvers.linearsolver", "pyCBD.loopsolvers.solver", "pyCBD.loopsolvers.sympysolver", "pyCBD.naivelog", "pyCBD.preprocessing", "pyCBD.preprocessing.butcher", "pyCBD.preprocessing.rungekutta", "pyCBD.realtime", "pyCBD.realtime.accurate_time", "pyCBD.realtime.plotting", "pyCBD.realtime.threadingBackend", "pyCBD.realtime.threadingGameLoop", "pyCBD.realtime.threadingGameLoopAlt", "pyCBD.realtime.threadingPython", "pyCBD.realtime.threadingTkInter", "pyCBD.scheduling", "pyCBD.simulator", "pyCBD.state_events", "pyCBD.state_events.locators", "pyCBD.tracers", "pyCBD.tracers.baseTracer", "pyCBD.tracers.color", "pyCBD.tracers.tracerVerbose", "pyCBD.util", "running"], "filenames": ["CBD.rst", "CBD.Core.rst", "CBD.converters.rst", "CBD.converters.CBD2C.rst", "CBD.converters.CBDDraw.rst", "CBD.converters.eq2CBD.rst", "CBD.converters.hybrid.rst", "CBD.converters.latexify.rst", "CBD.converters.latexify.CBD2Latex.rst", "CBD.converters.latexify.functions.rst", "CBD.depGraph.rst", "CBD.lib.rst", "CBD.lib.endpoints.rst", "CBD.lib.ev3.rst", "CBD.lib.extra.rst", "CBD.lib.io.rst", "CBD.lib.std.rst", "CBD.loopsolvers.rst", "CBD.loopsolvers.linearsolver.rst", "CBD.loopsolvers.solver.rst", "CBD.loopsolvers.sympysolver.rst", "CBD.naivelog.rst", "CBD.preprocessing.rst", "CBD.preprocessing.butcher.rst", "CBD.preprocessing.rungekutta.rst", "CBD.realtime.rst", "CBD.realtime.accurate_time.rst", "CBD.realtime.plotting.rst", "CBD.realtime.threadingBackend.rst", "CBD.realtime.threadingGameLoop.rst", "CBD.realtime.threadingGameLoopAlt.rst", "CBD.realtime.threadingPython.rst", "CBD.realtime.threadingTkInter.rst", "CBD.scheduling.rst", "CBD.simulator.rst", "CBD.state_events.rst", "CBD.state_events.locators.rst", "CBD.tracers.rst", "CBD.tracers.baseTracer.rst", "CBD.tracers.color.rst", "CBD.tracers.tracerVerbose.rst", "CBD.util.rst", "changelog.rst", "examples/ContinuousTime.rst", "examples/Dashboard.rst", "examples/EvenNumberGen.rst", "examples/Fibonacci.rst", "examples/LCG.rst", "examples/LivePlot.rst", "examples/RealTime.rst", "examples/SinGen.rst", "index.rst", "install.rst", "issues.rst", "pyCBD.rst", "pyCBD.Core.rst", "pyCBD.converters.rst", "pyCBD.converters.CBD2C.rst", "pyCBD.converters.CBDDraw.rst", "pyCBD.converters.eq2CBD.rst", "pyCBD.converters.hybrid.rst", "pyCBD.converters.latexify.rst", "pyCBD.converters.latexify.CBD2Latex.rst", "pyCBD.converters.latexify.functions.rst", "pyCBD.depGraph.rst", "pyCBD.lib.rst", "pyCBD.lib.endpoints.rst", "pyCBD.lib.ev3.rst", "pyCBD.lib.extra.rst", "pyCBD.lib.io.rst", "pyCBD.lib.std.rst", "pyCBD.loopsolvers.rst", "pyCBD.loopsolvers.linearsolver.rst", "pyCBD.loopsolvers.solver.rst", "pyCBD.loopsolvers.sympysolver.rst", "pyCBD.naivelog.rst", "pyCBD.preprocessing.rst", "pyCBD.preprocessing.butcher.rst", "pyCBD.preprocessing.rungekutta.rst", "pyCBD.realtime.rst", "pyCBD.realtime.accurate_time.rst", "pyCBD.realtime.plotting.rst", "pyCBD.realtime.threadingBackend.rst", "pyCBD.realtime.threadingGameLoop.rst", "pyCBD.realtime.threadingGameLoopAlt.rst", "pyCBD.realtime.threadingPython.rst", "pyCBD.realtime.threadingTkInter.rst", "pyCBD.scheduling.rst", "pyCBD.simulator.rst", "pyCBD.state_events.rst", "pyCBD.state_events.locators.rst", "pyCBD.tracers.rst", "pyCBD.tracers.baseTracer.rst", "pyCBD.tracers.color.rst", "pyCBD.tracers.tracerVerbose.rst", "pyCBD.util.rst", "running.rst"], "titles": ["CBD package", "CBD.Core module", "CBD.converters", "Generate C code from CBDs", "Generate GraphViz from CBD Models", "Generate CBD Models from Equations", "Encapsulating CBD Models in PythonPDEVS", "Generate LaTeX from CBD Models", "CBD.converters.latexify.CBD2Latex module", "CBD.converters.latexify.functions module", "CBD.depGraph module", "Standard CBD Library (BBL)", "CBD.lib.endpoints module", "Using CBDs with LEGO MINDSTORMS EV3", "CBD.lib.extra module", "CBD.lib.io module", "CBD.lib.std module", "CBD.loopsolvers module", "CBD.loopsolvers.linearsolver module", "CBD.loopsolvers.solver module", "CBD.loopsolvers.sympysolver module", "CBD.naivelog module", "CBD.preprocessing package", "CBD.preprocessing.butcher module", "CBD.preprocessing.rungekutta module", "CBD.realtime package", "CBD.realtime.accurate_time module", "CBD.realtime.plotting module", "CBD.realtime.threadingBackend module", "CBD.realtime.threadingGameLoop module", "CBD.realtime.threadingGameLoopAlt module", "CBD.realtime.threadingPython module", "CBD.realtime.threadingTkInter module", "CBD.scheduling module", "CBD.simulator module", "CBD.state_events module", "CBD.state_events.locators module", "CBD.tracers package", "CBD.tracers.baseTracer module", "CBD.tracers.color module", "CBD.tracers.tracerVerbose module", "CBD.util module", "Changelog", "Continuous Time Simulation", "TkInter Dashboard with Editable Values", "Hierarchical Even Number Generator", "Fibonacci Sequence Generator", "Linear Congruential Generator", "Live Plotting of Data During the Simulation", "Realtime Simulation", "Sine Generator", "Welcome to the pyCBD Simulator\u2019s Documentation!", "How to install the pyCBD framework?", "Common Issues and Solutions", "pyCBD package", "pyCBD.Core module", "pyCBD.converters", "Generate C code from CBDs", "Generate GraphViz from CBD Models", "Generate CBD Models from Equations", "Encapsulating CBD Models in PythonPDEVS", "Generate LaTeX from CBD Models", "pyCBD.converters.latexify.CBD2Latex module", "pyCBD.converters.latexify.functions module", "pyCBD.depGraph module", "Standard CBD Library (BBL)", "pyCBD.lib.endpoints module", "Using CBDs with LEGO MINDSTORMS EV3", "pyCBD.lib.extra module", "pyCBD.lib.io module", "pyCBD.lib.std module", "pyCBD.loopsolvers module", "pyCBD.loopsolvers.linearsolver module", "pyCBD.loopsolvers.solver module", "pyCBD.loopsolvers.sympysolver module", "pyCBD.naivelog module", "pyCBD.preprocessing package", "pyCBD.preprocessing.butcher module", "pyCBD.preprocessing.rungekutta module", "pyCBD.realtime package", "pyCBD.realtime.accurate_time module", "pyCBD.realtime.plotting module", "pyCBD.realtime.threadingBackend module", "pyCBD.realtime.threadingGameLoop module", "pyCBD.realtime.threadingGameLoopAlt module", "pyCBD.realtime.threadingPython module", "pyCBD.realtime.threadingTkInter module", "pyCBD.scheduling module", "pyCBD.simulator module", "pyCBD.state_events module", "pyCBD.state_events.locators module", "pyCBD.tracers package", "pyCBD.tracers.baseTracer module", "pyCBD.tracers.color module", "pyCBD.tracers.tracerVerbose module", "pyCBD.util module", "How to run a CBD simulation?"], "terms": {"standard": [0, 42, 50, 51, 53, 54, 58, 66, 70, 90], "librari": [0, 48, 50, 51, 52, 53, 54, 68, 69, 70], "bbl": [0, 51, 54], "lib": [0, 11, 13, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 65, 67, 78, 88], "std": [0, 11, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 65, 66, 78, 88], "modul": [0, 2, 3, 7, 11, 13, 22, 25, 37, 42, 48, 49, 50, 51, 52, 54, 56, 57, 61, 65, 67, 76, 79, 91], "io": [0, 11, 42, 54, 65], "endpoint": [0, 11, 42, 44, 48, 49, 54, 65], "extra": [0, 11, 52, 54, 65, 78], "us": [0, 7, 11, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 76, 78, 81, 82, 84, 85, 87, 88, 90, 91, 93], "lego": [0, 11, 54, 65], "mindstorm": [0, 11, 54, 65], "ev3": [0, 11, 54, 65], "realtim": [0, 42, 44, 48, 51, 52, 54, 88], "accurate_tim": [0, 25, 52, 54, 79], "plot": [0, 25, 42, 43, 44, 49, 50, 51, 52, 54, 58, 66, 79], "threadingbackend": [0, 25, 52, 54, 79], "threadinggameloop": [0, 25, 52, 54, 79, 82, 84], "threadinggameloopalt": [0, 25, 49, 52, 54, 79, 82], "threadingpython": [0, 25, 52, 54, 79, 82, 88], "threadingtkint": [0, 25, 52, 54, 79, 82], "tracer": [0, 42, 51, 54, 75, 88], "color": [0, 37, 48, 54, 58, 91, 92], "basetrac": [0, 37, 54, 88, 91, 94], "tracerverbos": [0, 37, 54, 91], "convert": [0, 7, 42, 51, 52, 54, 58, 61, 95], "gener": [0, 2, 42, 43, 44, 48, 49, 51, 52, 53, 54, 55, 56, 62, 63, 69, 70, 77, 78, 89], "model": [0, 2, 13, 43, 45, 46, 47, 50, 51, 53, 54, 55, 56, 62, 64, 66, 67, 70, 76, 78, 87, 88, 89, 91, 92, 96], "from": [0, 2, 13, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 62, 64, 66, 67, 69, 70, 77, 78, 81, 88, 89, 90, 93, 96], "equat": [0, 2, 7, 42, 44, 46, 47, 50, 51, 54, 56, 61, 62, 63, 70, 72, 74, 78], "latex": [0, 2, 42, 51, 54, 56, 62, 63], "latexifi": [0, 2, 7, 54, 56, 61], "cbd2latex": [0, 2, 7, 54, 56, 61, 63], "function": [0, 2, 7, 42, 43, 44, 47, 48, 49, 50, 53, 54, 55, 56, 58, 61, 62, 70, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95], "c": [0, 2, 47, 54, 56, 70, 77], "code": [0, 2, 7, 13, 42, 43, 48, 52, 54, 55, 56, 61, 67, 81, 82, 87, 96], "graphviz": [0, 2, 52, 54, 56, 64], "encapsul": [0, 2, 54, 56], "pythonpdev": [0, 2, 52, 54, 56, 88, 91], "loopsolv": [0, 51, 54, 88], "solver": [0, 17, 42, 53, 54, 71, 72, 74, 77, 88], "linearsolv": [0, 17, 42, 54, 71, 88], "sympysolv": [0, 17, 42, 54, 71], "state_ev": [0, 51, 54, 88], "locat": [0, 35, 44, 54, 55, 69, 81, 87, 88, 89, 96], "preprocess": [0, 43, 51, 54], "butcher": [0, 22, 42, 43, 54, 76, 78], "rungekutta": [0, 22, 43, 54, 76], "core": [0, 7, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 78, 87, 88, 91, 92, 94], "depgraph": [0, 51, 54, 87], "naivelog": [0, 42, 51, 52, 54], "schedul": [0, 42, 51, 54, 88], "simul": [0, 7, 13, 42, 44, 46, 47, 50, 52, 53, 54, 55, 61, 62, 66, 67, 70, 73, 74, 76, 81, 82, 83, 84, 86, 87, 91, 92, 94, 95], "util": [0, 51, 52, 54, 55], "thi": [3, 7, 13, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 81, 82, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "ha": [3, 42, 43, 48, 49, 51, 55, 57, 78, 81, 82, 87, 88], "been": [3, 42, 43, 51, 52, 53, 57, 62, 66, 78, 81, 87, 88], "extract": [3, 42, 57], "cbd2fmu": [3, 42, 57], "project": [3, 42, 51, 52, 57, 90], "order": [3, 13, 43, 48, 55, 57, 67, 69, 70, 76, 77, 78, 81, 87, 88, 93], "minim": [3, 44, 57, 70, 78, 81, 90], "duplic": [3, 42, 47, 57], "depend": [3, 43, 50, 51, 55, 57, 63, 64, 70, 72, 76, 87, 93], "overhead": [3, 48, 57, 81], "bundl": [7, 52, 61], "i": [7, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 61, 62, 63, 64, 66, 69, 70, 72, 75, 76, 77, 78, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 95, 96], "power": [7, 48, 61, 70], "It": [7, 43, 44, 46, 48, 49, 53, 55, 61, 69, 70, 74, 77, 81, 82, 84, 88, 89], "transform": [7, 43, 45, 61, 70], "an": [7, 42, 43, 44, 48, 49, 50, 51, 55, 58, 61, 63, 64, 66, 69, 70, 72, 73, 74, 77, 78, 81, 82, 87, 88, 89, 90, 91, 93, 95, 96], "input": [7, 42, 43, 44, 45, 48, 55, 61, 62, 63, 66, 69, 70, 72, 73, 74, 78, 81, 88], "set": [7, 43, 44, 47, 48, 50, 54, 55, 56, 61, 62, 63, 66, 68, 69, 70, 76, 77, 78, 81, 87, 88, 91, 92, 93, 96], "which": [7, 43, 44, 45, 48, 50, 51, 52, 55, 61, 62, 64, 66, 69, 70, 78, 81, 82, 84, 87, 88, 90, 91, 92, 94, 96], "can": [7, 13, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 58, 61, 62, 66, 67, 69, 70, 72, 73, 78, 81, 85, 90, 92, 93, 96], "output": [7, 42, 43, 45, 46, 48, 49, 50, 55, 58, 61, 62, 66, 69, 70, 78, 88, 89, 90], "plaintext": [7, 61], "format": [7, 44, 54, 61, 62, 69, 71, 72, 92], "For": [7, 13, 43, 46, 48, 55, 58, 61, 67, 69, 70, 78, 81, 88, 90, 93, 96], "educ": [7, 61], "purpos": [7, 55, 61, 72], "also": [7, 42, 43, 44, 48, 49, 53, 55, 61, 70, 77, 78, 82, 88], "possibl": [7, 43, 48, 49, 55, 61, 62, 68, 70, 88], "all": [7, 44, 45, 48, 49, 52, 53, 55, 61, 62, 63, 64, 66, 69, 70, 73, 78, 81, 82, 87, 88, 89, 91, 92, 93], "intermediari": [7, 48, 61, 62], "step": [7, 42, 48, 49, 51, 52, 54, 61, 62, 70, 77, 79, 81, 82, 83, 84, 88, 90, 96], "were": [7, 42, 55, 61, 81, 88], "obtain": [7, 43, 44, 46, 50, 54, 55, 58, 61, 62, 63, 64, 66, 70, 77, 78, 81, 87, 91, 92], "final": [7, 61, 81, 91, 92], "simplifi": [7, 49, 54, 56, 61, 62, 63, 70, 75], "As": [7, 44, 47, 48, 61, 88], "exampl": [7, 42, 43, 45, 47, 50, 55, 58, 61, 70, 81, 96], "sine": [7, 43, 44, 45, 47, 48, 49, 51, 61, 81], "assum": [7, 43, 45, 55, 61, 64, 70, 81, 87, 90], "singen": [7, 43, 44, 45, 48, 49, 50, 61], "class": [7, 42, 44, 45, 46, 47, 48, 49, 50, 53, 55, 61, 62, 63, 64, 66, 69, 70, 72, 73, 74, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96], "exist": [7, 48, 51, 54, 61, 64, 70, 79, 81, 90, 91], "creat": [7, 13, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 61, 62, 63, 64, 67, 70, 77, 78, 79, 81, 87, 91], "store": [7, 48, 55, 61, 66, 69, 70, 77], "variabl": [7, 42, 43, 44, 49, 50, 52, 61, 62, 63, 70, 90], "addition": [7, 44, 46, 49, 55, 61, 69, 92], "import": [7, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 61, 76], "unit": [7, 46, 48, 61, 66, 81], "OR": [7, 48, 61], "altern": [7, 48, 49, 61, 77, 82, 84, 88], "next": [7, 44, 48, 49, 50, 52, 55, 61, 70], "we": [7, 43, 44, 45, 46, 47, 48, 49, 50, 55, 61, 66, 69, 70], "tell": [7, 61], "u": [7, 50, 61], "system": [7, 13, 42, 48, 49, 51, 53, 61, 62, 67, 70, 72, 78, 80, 81, 88, 96], "more": [7, 42, 43, 44, 46, 47, 48, 58, 61, 62, 68, 69, 70, 78, 81, 88, 90, 96], "inform": [7, 43, 44, 48, 55, 61, 66, 70, 81, 88, 89, 91, 92, 93, 96], "about": [7, 48, 55, 61, 66, 81], "keyword": [7, 48, 55, 61, 62, 63, 69, 81], "argument": [7, 48, 49, 50, 55, 61, 62, 63, 69, 70, 81, 82, 85, 88, 89, 90, 91, 93], "take": [7, 43, 44, 47, 48, 51, 52, 61, 62, 69, 81, 88, 89, 96], "look": [7, 43, 44, 47, 48, 50, 51, 58, 61, 69, 70, 88, 96], "document": [7, 42, 44, 48, 52, 61, 92], "show_step": [7, 61, 62], "true": [7, 47, 55, 61, 62, 63, 69, 70, 81, 82, 87, 88, 92, 96], "render_latex": [7, 61, 62], "fals": [7, 55, 61, 62, 63, 64, 69, 81, 82, 88, 91, 92], "To": [7, 13, 43, 48, 49, 50, 61, 67, 70, 88, 93], "you": [7, 45, 47, 48, 49, 52, 53, 55, 61, 63, 70, 81, 84, 88, 96], "call": [7, 43, 45, 48, 49, 50, 53, 55, 61, 62, 63, 64, 66, 69, 70, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 90, 96], "method": [7, 43, 45, 48, 49, 53, 55, 61, 62, 69, 77, 81, 88, 90, 92, 95, 96], "when": [7, 43, 45, 46, 48, 49, 51, 52, 53, 55, 58, 61, 62, 63, 66, 69, 70, 77, 78, 81, 82, 83, 84, 87, 88, 90, 92, 93], "wa": [7, 42, 43, 44, 45, 48, 55, 61, 66, 70, 81, 87, 92], "addit": [7, 44, 48, 52, 61, 81, 82, 88], "consol": [7, 55, 61, 88, 92, 93], "If": [7, 43, 47, 48, 50, 55, 61, 63, 64, 69, 70, 87, 88, 91, 92], "see": [7, 43, 44, 47, 48, 53, 61, 62, 81, 88], "noth": [7, 51, 61, 77], "after": [7, 46, 47, 48, 49, 61, 70, 81, 82, 88, 90], "simplif": [7, 61, 62], "string": [7, 55, 61, 62, 64, 69, 70, 78, 82, 92, 93, 95], "represent": [7, 43, 55, 61, 62, 63], "render": [7, 42, 49, 54, 56, 58, 61, 62, 81], "print": [7, 46, 47, 49, 61, 88, 93], "result": [7, 43, 44, 48, 55, 58, 61, 62, 70, 72, 81, 90], "The": [7, 13, 43, 45, 46, 48, 49, 50, 51, 52, 53, 55, 58, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "shown": [7, 53, 55, 61, 62, 77, 81, 88], "below": [7, 43, 48, 53, 61, 77, 88, 89, 90], "initi": [7, 51, 61, 70, 78], "sin": [7, 44, 48, 49, 50, 61, 81], "out1": [7, 45, 46, 47, 50, 55, 61, 70], "in1": [7, 45, 46, 47, 50, 55, 61, 70], "time": [7, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 61, 62, 63, 66, 69, 70, 72, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96], "1": [7, 42, 43, 44, 46, 47, 48, 50, 51, 52, 55, 61, 62, 66, 69, 70, 77, 78, 81, 87, 88, 89, 90, 92, 94, 95, 96], "substitut": [7, 54, 56, 61, 62], "connect": [7, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 61, 70, 79, 81, 87, 88], "constant": [7, 43, 55, 61, 62, 63, 70], "valu": [7, 43, 46, 47, 48, 49, 51, 54, 55, 61, 62, 63, 66, 69, 70, 77, 78, 81, 85, 87, 88, 89, 90], "2": [7, 42, 44, 45, 46, 47, 49, 50, 51, 52, 61, 69, 70, 77, 78, 88, 89, 90], "fulli": [13, 49, 67], "access": [13, 43, 66, 67, 81], "via": [13, 43, 67, 81], "python": [13, 42, 48, 50, 51, 52, 54, 67, 70, 79, 80, 82, 85, 88, 95, 96], "combin": [13, 49, 62, 67, 77, 93], "continu": [13, 48, 51, 55, 67, 88], "embed": [13, 67], "stand": [13, 67], "reason": [13, 43, 67], "do": [13, 44, 46, 48, 49, 50, 66, 67, 69, 70, 78, 81, 82, 84, 88], "so": [13, 49, 52, 62, 66, 67, 81, 84], "pybrick": [13, 67], "micropython": [13, 67], "In": [13, 43, 46, 48, 49, 55, 66, 67, 69, 70, 75, 81, 89], "follow": [13, 43, 44, 46, 47, 49, 52, 54, 58, 67, 77, 79, 81, 88], "instal": [13, 49, 51, 67, 68, 74, 81, 96], "instruct": [13, 67], "websit": [13, 67], "bootabl": [13, 67], "flash": [13, 67], "microsd": [13, 67], "card": [13, 67], "run": [13, 42, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 67, 79, 82, 85, 88], "simpli": [13, 48, 50, 52, 67, 88], "write": [13, 67, 69, 92, 93], "your": [13, 45, 48, 49, 52, 53, 55, 63, 67, 69, 70, 81, 96], "start": [13, 43, 46, 48, 49, 50, 55, 66, 67, 70, 78, 81, 87, 88, 90, 91, 92, 94], "conveni": [13, 67, 81, 88], "some": [13, 42, 43, 48, 49, 50, 52, 53, 63, 67, 69, 75, 81, 96], "build": [13, 44, 45, 50, 52, 67, 69, 70], "block": [13, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 62, 63, 66, 67, 68, 69, 70, 72, 73, 74, 78, 82, 85, 87, 88, 91, 92, 94], "ar": [13, 43, 44, 45, 47, 48, 49, 52, 53, 55, 62, 67, 68, 69, 70, 78, 81, 85, 87, 88, 90, 91], "prebuild": [13, 67], "version": [42, 51, 52, 55, 70, 80, 81, 84, 88, 93, 95], "6": [42, 47, 51, 52, 77, 88, 95], "ad": [42, 53, 55, 64, 69, 70, 77], "commun": [42, 88], "interv": [42, 55, 81, 87, 88, 90], "taken": [42, 62, 78, 81, 87], "account": [42, 78], "csv": [42, 69], "mat": 42, "vcd": 42, "chang": [42, 43, 44, 48, 50, 51, 52, 55, 62, 70, 81], "name": [42, 45, 48, 49, 50, 51, 55, 58, 62, 63, 66, 69, 70, 78, 81, 87, 88, 89, 90, 91, 92], "cbd": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 62, 63, 64, 68, 70, 78, 81, 87, 88, 90, 91, 92, 94, 95], "pycbd": [42, 58, 61, 65, 67, 96], "5": [42, 43, 44, 46, 47, 48, 51, 52, 55, 72, 77, 81, 90], "how": [42, 43, 44, 47, 48, 50, 51, 55, 62, 69, 70, 81, 87], "port": [42, 43, 45, 50, 53, 54, 55, 69, 70, 78, 89, 90], "work": [42, 43, 48, 52, 55, 66, 81, 88, 93], "instead": [42, 47, 48, 49, 55, 81], "portblock": 42, "custom": [42, 55, 70, 72, 80, 87, 88], "introduc": 42, "inputportblock": 42, "wireblock": 42, "outputportblock": 42, "remov": [42, 48, 55, 62, 64, 69, 75, 81, 91, 92, 93], "flatten": [42, 43, 51, 54, 55, 62, 78], "now": [42, 45, 46, 47, 48, 50, 54, 56, 61, 63], "ignor": [42, 45, 55, 62, 69, 70, 81, 88], "empti": [42, 55, 62, 77, 87], "between": [42, 48, 50, 53, 55, 64, 66, 69, 70, 81, 88, 90], "have": [42, 43, 44, 45, 47, 48, 49, 52, 53, 55, 62, 63, 66, 69, 72, 78, 88], "renam": [42, 54, 56, 61, 62], "descript": [42, 51, 62], "linkinput": 42, "linktoinput": [42, 54, 55], "getsign": [42, 54, 55], "split": [42, 45, 70], "getoutputportnam": [42, 54, 55], "getsignalhistori": [42, 46, 47, 50, 54, 55], "log": [42, 70, 75], "effici": [42, 48, 72, 74, 88], "pubsub": 42, "structur": [42, 43, 55, 81, 84], "asynchron": [42, 49], "trace": [42, 43, 54, 88, 91, 92, 93, 94], "happen": [42, 43, 47, 49, 66, 69, 78, 88, 90, 91, 92, 94], "cbd2c": 42, "reduc": [42, 43, 44, 48, 54, 71, 74, 91], "w": [42, 52, 66, 69, 70, 81], "r": [42, 52, 66, 69, 70, 81, 88], "t": [42, 44, 46, 48, 49, 50, 52, 64, 66, 69, 70, 72, 78, 80, 81, 88, 90, 91], "framework": [42, 48, 50, 51, 66, 81, 96], "bokeh": [42, 51, 52, 54, 79, 81], "4": [42, 43, 44, 47, 70, 77, 78], "deltatblock": [42, 54, 63, 65, 70], "delta_t": [42, 55, 62, 70, 88], "integratorblock": [42, 43, 53, 54, 63, 65, 70, 78], "derivatorblock": [42, 53, 54, 63, 65, 70], "bugfix": 42, "21": [42, 46], "keyerror": [42, 51], "constructinput": [42, 54, 71, 72, 73, 74], "22": 42, "assertionerror": [42, 51, 69, 81, 88], "becaus": [42, 43, 47, 48, 50, 55, 70, 81], "delayblock": [42, 46, 47, 53, 54, 63, 65, 70], "part": [42, 55, 70], "algebra": [42, 51, 72, 73, 74, 88], "loop": [42, 49, 51, 54, 72, 73, 74, 79, 82, 83, 84, 88], "iter": [42, 50, 55, 62, 64, 66, 69, 70, 73, 74, 77, 78, 82, 87, 88, 90, 91, 92, 93, 94], "25": [42, 77], "test": [42, 51, 55, 70], "make": [42, 43, 44, 48, 49, 53, 62, 66, 70, 78, 81, 88, 93], "clock": [42, 51, 54, 55, 65, 70, 78, 84, 88], "30": [42, 70], "none": [42, 55, 58, 62, 66, 69, 70, 72, 73, 74, 77, 78, 81, 87, 88, 91, 92, 93, 94], "v": [42, 46, 47, 96], "int": [42, 55, 62, 64, 66, 69, 70, 73, 74, 77, 78, 81, 87, 90, 91, 92, 94, 95], "comparison": 42, "fail": 42, "3": [42, 44, 46, 47, 49, 50, 51, 52, 70, 77, 90, 95], "optim": [42, 62, 70], "stepwis": [42, 48], "py": [42, 52, 96], "prevent": [42, 43, 44, 50, 55, 88, 93], "simpl": [42, 48, 50, 53, 62, 70, 85, 90, 95, 96], "eq2cbd": [42, 52, 62], "old": [42, 78], "size": [42, 44, 48, 51, 70, 72, 77, 81, 90], "rung": [42, 43, 77, 78], "kutta": [42, 43, 77, 78], "preprocessor": [42, 78], "tableau": [42, 43, 77, 78], "made": [42, 52, 81, 83, 84], "succe": 42, "onc": [42, 62, 81], "again": [42, 69], "multi": [42, 70], "rate": [42, 43, 55, 70, 87, 88, 93], "topolog": [42, 87], "sort": [42, 69, 87], "increas": [42, 55, 72], "coverag": 42, "dashboard": [42, 43, 48, 49, 51], "live": [42, 44, 49, 51, 66, 81], "0": [42, 43, 44, 46, 47, 48, 49, 50, 55, 69, 70, 72, 77, 78, 81, 82, 87, 88, 89, 90, 96], "rework": 42, "singl": [42, 45, 48, 50, 66, 70, 81, 88, 90], "file": [42, 48, 58, 69, 70, 75, 81, 87, 88, 91, 92, 93, 96], "better": [42, 50], "pypdev": [42, 49], "backend": [42, 44, 48, 51, 52, 54, 79, 81, 82, 84, 88], "progress": [42, 49, 52, 83, 84, 88, 96], "bar": [42, 49, 52, 88], "flexibl": [42, 81], "doc": [42, 52], "given": [43, 44, 48, 55, 58, 64, 66, 78, 81, 90, 93], "alwai": [43, 46, 53, 55, 69, 70, 81, 88], "discret": 43, "execut": [43, 48, 49, 52, 62, 69, 81, 82, 84, 85, 86, 87, 88, 89, 96], "ask": 43, "done": [43, 48, 50, 55, 62, 66, 69, 78, 81, 84, 88], "delta": [43, 49, 50, 55, 62, 70, 78, 88], "inbetween": 43, "multipl": [43, 44, 48, 62, 63, 66, 70, 78, 81, 88, 90, 91], "howev": [43, 49, 53, 55, 70], "mai": [43, 44, 45, 48, 49, 53, 70, 72, 75, 76, 78, 81, 82, 88, 93], "comput": [43, 45, 48, 49, 50, 51, 54, 55, 62, 63, 64, 65, 66, 69, 70, 77, 78, 81, 87, 88, 90, 91, 92, 94], "too": [43, 48], "often": [43, 44, 48, 55, 70, 84, 87], "what": [43, 55, 70, 81, 84, 88], "requir": [43, 45, 48, 49, 52, 55, 66, 69, 70, 72, 74, 81, 87, 89, 90, 96], "data": [43, 44, 46, 49, 50, 51, 52, 54, 55, 65, 66, 69, 81, 89, 91], "wave": [43, 48, 50, 81], "With": 43, "previous": [43, 55, 87], "discuss": [43, 46], "techniqu": 43, "could": [43, 49, 72], "where": [43, 50, 55, 62, 70, 72, 77, 78, 81], "new": [43, 46, 55, 63, 69, 70, 78, 81, 82, 88, 91, 92, 94], "being": [43, 44, 48, 66], "everi": [43, 44, 45, 50, 69, 78, 81, 87, 88], "dt": [43, 78], "smaller": [43, 44, 70, 81], "precis": [43, 78, 90], "same": [43, 48, 51, 55, 72, 81, 88], "twice": [43, 88], "mark": [43, 52, 54, 64, 93], "point": [43, 48, 52, 55, 63, 66, 81, 88, 90], "highlight": [43, 54, 91, 93], "recomput": [43, 70, 87], "clear": [43, 54, 55, 65, 66, 69], "identifi": [43, 52, 55, 62, 64, 69, 70, 76, 77, 78, 81, 82, 87, 88, 90, 92], "accur": [43, 48, 62, 77, 88, 90], "behaviour": [43, 70, 78, 81, 88], "default": [43, 45, 49, 55, 62, 66, 69, 70, 77, 78, 81, 82, 87, 88, 89, 90, 91, 92, 93], "explicitli": 43, "sim": [43, 44, 46, 47, 48, 49, 50, 91, 96], "object": [43, 44, 51, 55, 62, 63, 64, 69, 72, 73, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 95], "setdeltat": [43, 44, 48, 49, 50, 54, 65, 70, 88, 96], "academ": 43, "much": [43, 48, 50, 62, 70], "easier": 43, "explain": [43, 81], "compar": [43, 54, 79, 81, 87], "vari": 43, "By": [43, 45, 46, 49, 62, 81], "maintain": [43, 76, 88, 91], "implement": [43, 46, 50, 64, 70, 77, 88, 90, 92, 94], "actual": [43, 50, 53, 62, 78, 81, 82, 84, 87, 88], "automat": [43, 44, 49, 77, 81, 88], "add": [43, 46, 50, 51, 52, 55, 64, 70, 77, 81, 88, 96], "abov": [43, 48, 50, 62, 89, 90], "manual": [43, 88], "addfixedrateclock": [43, 54, 55], "timeblock": [43, 44, 45, 48, 49, 50, 54, 63, 65, 70], "current": [43, 44, 49, 50, 55, 62, 63, 64, 70, 73, 74, 78, 81, 82, 84, 87, 88, 91, 92, 94], "therefor": [43, 44, 46, 49, 70, 87, 92], "without": [43, 45, 48, 52, 55, 70], "need": [43, 44, 46, 48, 50, 52, 55, 63, 66, 69, 70, 81, 85, 88, 92, 93], "either": [43, 48, 58, 70, 88, 91], "link": [43, 46, 55, 62, 70, 78], "should": [43, 48, 49, 52, 55, 66, 69, 70, 74, 81, 82, 87, 90, 91, 92, 93], "yield": [43, 46, 49, 70, 78, 88], "correct": [43, 55, 70, 80], "e": [43, 46, 48, 49, 53, 55, 62, 63, 66, 69, 70, 77, 81, 87, 88, 91, 92, 94], "constantblock": [43, 44, 45, 46, 47, 49, 54, 55, 63, 65, 70], "throughout": 43, "allow": [43, 48, 49, 52, 62, 66, 70, 75, 76, 77, 78, 81, 82, 88, 89, 92], "variat": [43, 48, 49], "rk": [43, 77, 78], "onli": [43, 44, 48, 50, 51, 55, 62, 66, 68, 70, 78, 81, 82, 83, 84, 87, 88, 89, 90, 92], "avail": [43, 68, 70, 78, 81], "one": [43, 46, 48, 52, 55, 62, 63, 70, 78, 81, 82, 88], "instanc": [43, 48, 51, 55, 58, 81, 88, 90, 91, 96], "origin": [43, 62, 64, 78], "sure": [43, 47, 53, 66, 96], "error": [43, 53, 70, 77, 78, 88, 90], "rkpreprocessor": [43, 54, 76, 78], "diagram": [43, 55], "appli": [43, 48, 54, 56, 61, 63, 70], "algorithm": [43, 54, 55, 66, 70, 77, 87, 89, 90], "estim": [43, 90], "full": [43, 45, 47, 55, 63, 81], "famili": 43, "long": [43, 48, 49, 88], "thei": [43, 49, 53, 78, 81, 87, 88], "butchertableau": [43, 54, 76, 77, 78], "includ": [43, 53, 55, 70], "fehlberg": [43, 77], "4th": [43, 77], "5th": [43, 77], "ensur": [43, 44, 48, 53, 70, 87, 90], "bt": 43, "1e": [43, 70, 78, 90], "rkf45": [43, 54, 76, 77, 78], "rkp": 43, "atol": [43, 78], "2e": 43, "hmin": [43, 78], "safeti": [43, 78, 88], "84": [43, 77, 78], "newmodel": 43, "oldmodel": 43, "notic": [43, 44, 48, 50], "return": [43, 47, 55, 63, 64, 66, 69, 70, 77, 78, 81, 82, 85, 88, 90, 91, 96], "must": [43, 47, 48, 49, 55, 58, 62, 63, 64, 66, 69, 70, 78, 81, 82, 87, 88, 89, 90, 92, 93, 94], "refer": [43, 48, 64, 69, 72], "read": [43, 69], "tkinter": [43, 51, 52, 54, 79, 82, 86, 88], "edit": [43, 48, 49, 51, 52, 78], "path": [43, 52, 55, 62, 70, 72, 73, 74, 87, 88], "k_0": 43, "block_nam": [43, 44, 46, 47, 55, 66, 69, 70, 87], "wai": [43, 44, 48, 49, 52], "perfectli": 43, "copi": [43, 55, 88], "discourag": [43, 49], "intern": [43, 48, 49, 53, 66, 70, 72, 81, 84, 88], "signal": [43, 47, 50, 54, 55, 66, 69, 70, 79, 81, 88, 89, 90], "pleas": [43, 47, 48, 88], "itself": [43, 49, 50, 53, 55, 69, 81], "unfortun": 43, "side": 43, "effect": [43, 44, 88], "compli": [43, 44], "user": [44, 48, 52, 70, 76, 81, 88], "would": [44, 46, 48, 50], "like": [44, 45, 46, 48, 49, 50, 52, 96], "interact": [44, 69, 88], "certain": [44, 47, 48, 70, 88, 93], "dure": [44, 49, 51, 53, 55, 66, 70], "small": [44, 48], "provid": [44, 48, 49, 50, 52, 55, 58, 69, 70, 72, 73, 74, 78, 81, 82, 84, 90, 91], "quit": [44, 49], "easi": 44, "normal": [44, 48, 49, 78, 81, 88], "slightli": [44, 93], "extend": [44, 77, 78], "formula": [44, 70, 78], "y": [44, 46, 47, 48, 50, 63, 66, 78, 81, 92], "A": [44, 47, 48, 50, 53, 55, 62, 63, 64, 69, 70, 77, 78, 81, 82, 87, 88, 89, 90, 92, 96], "cdot": [44, 47, 77, 78], "b": [44, 69, 77], "becom": [44, 49, 62], "signalcollectorblock": [44, 48, 49, 54, 65, 66], "def": [44, 45, 46, 47, 48, 49, 50], "__init__": [44, 45, 46, 47, 48, 49, 50], "self": [44, 45, 46, 47, 48, 49, 50], "input_port": [44, 45, 46, 47, 48, 49, 50, 55, 66], "output_port": [44, 45, 46, 47, 48, 49, 50, 54, 55], "addblock": [44, 45, 46, 47, 48, 49, 50, 53, 54, 55], "genericblock": [44, 48, 49, 50, 54, 63, 65, 70], "block_oper": [44, 48, 49, 50, 70], "productblock": [44, 45, 47, 54, 63, 65, 70], "amp": 44, "per": 44, "buffer": [44, 66], "memori": [44, 66, 78], "won": [44, 49, 81], "flood": 44, "buffer_s": [44, 66], "500": [44, 48, 72, 77, 96], "addconnect": [44, 45, 46, 47, 48, 49, 50, 53, 54, 55], "window": [44, 48, 88, 93], "plotmanag": [44, 48, 54, 79, 81], "assign": 44, "displai": [44, 48, 88], "callback": [44, 48], "axi": [44, 48, 81], "remain": [44, 48, 66, 81], "rang": [44, 48, 69, 70, 72, 78, 90], "grow": [44, 81], "larger": [44, 70, 81], "scope": 44, "lineplot": [44, 48, 54, 79, 81], "matplotlib": [44, 51, 52, 54, 79, 81], "pyplot": [44, 48], "plt": [44, 48], "tk": [44, 48, 49, 52, 54, 79, 82, 86, 88], "backend_tkagg": [44, 48], "figurecanvastkagg": [44, 48], "fig": [44, 48, 81], "figur": [44, 48, 58, 81], "figsiz": [44, 48], "15": [44, 77], "dpi": [44, 48], "100": [44, 48, 49], "ax": [44, 48, 81], "add_subplot": [44, 48], "111": [44, 48], "set_ylim": [44, 48, 54, 79, 81], "root": [44, 48, 49, 52, 55, 70, 86, 88, 90, 96], "canva": [44, 48], "master": [44, 48], "drawingarea": [44, 48], "draw": [44, 48, 58, 81, 93], "get_tk_widget": [44, 48], "grid": [44, 48], "column": [44, 48, 69, 77, 88], "row": [44, 48, 53, 72, 77], "manag": [44, 48, 81], "regist": [44, 48, 54, 79, 81, 88, 91], "find": [44, 48, 54, 55, 81, 90], "updat": [44, 48, 52, 54, 55, 79, 81, 84, 88], "lambda": [44, 48, 63, 81, 89], "d": [44, 48, 81, 92], "set_xlim": [44, 48, 54, 79, 81], "10": [44, 46, 48, 77, 81, 90, 93], "lower_bound": [44, 48, 81], "lower_lim": [44, 81], "upper_lim": [44, 81], "let": [44, 46, 50], "": [44, 45, 46, 48, 49, 50, 53, 55, 66, 69, 70, 77, 78, 81, 82, 87, 88, 92], "two": [44, 45, 46, 55, 64, 69, 72], "scale": [44, 78, 81, 88], "field": [44, 55, 69], "amplitud": 44, "proport": 44, "period": [44, 47, 88], "label": 44, "show": [44, 48, 54, 79, 81, 88, 96], "set_amplitud": 44, "set_period": 44, "abil": 44, "runtim": 44, "correspond": [44, 55, 62, 63, 64, 68, 69, 70, 72, 77, 81, 90], "alter": [44, 49, 50, 70, 78, 81, 89], "close": [44, 48, 69, 81, 92], "protocol": 44, "thread": [44, 51, 54, 79, 82, 84, 85, 88, 91], "text": [44, 62, 92, 93], "00": 44, "val": [44, 63], "setvalu": [44, 54, 65, 70], "float": [44, 55, 69, 70, 72, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "update_label": 44, "2f": 44, "getvalu": [44, 54, 65, 70], "length": 44, "1200": 44, "orient": 44, "horizont": [44, 48], "from_": 44, "resolut": 44, "command": [44, 48, 52], "And": [44, 45], "left": [44, 45, 62, 78, 81], "constraint": [44, 49, 63], "plenti": 44, "experiment": 44, "datapoint": [44, 81], "while": [44, 48, 49, 66, 70, 72, 80, 81, 88], "infinit": [44, 88], "setrealtim": [44, 48, 49, 54, 88], "setrealtimeplatformtk": [44, 48, 49, 54, 88], "mainloop": [44, 48, 49, 91], "especi": 44, "lot": [44, 48, 66], "noic": 44, "appear": 44, "caus": [44, 70, 89], "fact": [44, 48], "slider": 44, "anoth": [44, 46, 49, 63, 70, 93], "complet": [44, 46, 88], "differ": [44, 55, 70, 84], "lower": [44, 48, 69, 77, 78, 81, 90], "seen": [45, 47, 49, 66, 90], "basic": [45, 52, 55, 62, 66, 70], "section": [45, 46, 49, 52], "describ": [45, 46, 52], "simplist": 45, "At": [45, 69], "timestep": [45, 49], "its": [45, 46, 55, 63, 66, 69, 70, 81, 84, 87, 96], "doubl": 45, "up": [45, 47, 48, 70, 76, 78, 84, 88], "compon": [45, 48, 52, 72, 73, 74, 81, 87, 88, 89, 93], "construct": [45, 53, 55, 64, 70, 72, 73, 74, 77, 78, 95], "just": [45, 50, 69, 91, 92, 94], "evennumbergen": 45, "output_port_nam": [45, 50, 55], "input_port_nam": [45, 46, 47, 50, 55], "numgen": 45, "re": [45, 47, 48, 50, 70, 84, 88], "multipli": [45, 70], "mult": [45, 47], "inx": [45, 55, 70], "x": [45, 47, 48, 50, 51, 55, 63, 66, 70, 81], "index": [45, 70, 77, 78], "hierarchi": 45, "Of": 45, "cours": 45, "highli": [45, 49], "abl": [45, 74], "concept": 45, "revers": [45, 95], "composit": 45, "usag": [46, 50, 55, 70], "complex": [46, 48, 49, 51, 73, 88], "previou": [46, 55, 66, 70, 87], "whenev": [46, 47, 49, 53, 55, 78, 81, 88, 96], "receiv": [46, 69], "unless": [46, 70], "obvious": [46, 50], "g": [46, 49, 55, 62, 70, 81, 88], "begin": [46, 77, 88], "case": [46, 48, 49, 50, 69, 70, 82, 95], "ic": [46, 47, 70], "number": [46, 47, 51, 55, 58, 70, 77, 90, 95], "mathemat": [46, 62, 70], "adderblock": [46, 47, 54, 63, 65, 70], "later": [46, 48], "delai": [46, 47, 49, 55, 62, 70, 83, 84, 85, 96], "send": 46, "both": [46, 48, 63, 70, 78], "through": [46, 70, 89, 90, 93], "adder": [46, 63], "first": [46, 54, 62, 64, 65, 69, 70, 77, 78, 81, 87, 90], "fibonaccigen": 46, "delay1": 46, "delay2": 46, "sum": [46, 47, 54, 65, 66, 70, 78], "know": [46, 50, 70, 84], "leftrightarrow": 46, "our": [46, 47, 48, 50], "zero": [46, 48, 70, 77, 90], "_": [46, 47, 50, 55, 72, 77], "8": [46, 47, 72, 77, 78, 88], "13": [46, 77], "34": 46, "55": [46, 77], "lcg": [47, 96], "random": 47, "rng": 47, "mod": 47, "m": [47, 52, 92, 96], "repres": [47, 53, 55, 62, 63, 66, 69, 70, 72, 77, 78], "hierarch": [47, 50, 51, 55, 58], "even": [47, 51, 58, 70, 72, 81], "fibonacci": [47, 51], "sequenc": [47, 51, 70, 77, 93], "x0": 47, "moduloblock": [47, 54, 63, 65, 70], "in2": [47, 55, 70], "ve": 47, "alreadi": [47, 51, 55, 64, 78, 87], "give": [47, 50], "term": 47, "curit": [47, 64, 70, 73, 74, 87, 91, 92, 94], "unique_sign": 47, "len": 47, "than": [47, 48, 55, 62, 69, 70, 72, 78, 81, 88, 90], "uniqu": [47, 53, 55, 92], "encount": [47, 55], "9": [47, 77, 78, 81], "setterminationcondit": [47, 54, 88, 96], "cycl": [47, 64], "7": [47, 77], "sent": [48, 55], "over": [48, 55, 62, 70, 90], "individu": [48, 81], "batteri": [48, 96], "life": 48, "sensor": 48, "actuat": 48, "luckili": [48, 49, 50], "clean": [48, 70, 81], "manner": 48, "wrapper": [48, 81, 82, 88], "track": [48, 66, 69, 84, 91], "keep": [48, 49, 66, 69, 80, 81, 82, 84, 88, 91], "plothandl": [48, 54, 79, 81], "scatterplot": [48, 54, 79, 81], "scatter": [48, 81], "handler": [48, 81], "myhandl": 48, "listen": 48, "myblock": 48, "best": [48, 88], "xy": 48, "pair": [48, 66, 69, 81], "positioncollectorblock": [48, 54, 65, 66], "collector": [48, 49, 66], "most": [48, 53], "common": [48, 51, 62], "featur": [48, 49, 76, 81, 88], "other": [48, 49, 55, 63, 64, 69, 70, 72, 77, 78, 90, 93], "far": 48, "easiest": 48, "get": [48, 54, 55, 64, 70, 78, 79, 80, 81, 88], "concern": 48, "easili": [48, 58], "builtin": 48, "never": [48, 69, 81], "exce": 48, "red": [48, 54, 91, 93], "note": [48, 49, 70, 78], "p": [48, 78], "20": [48, 50], "visual": [48, 51, 52], "built": 48, "top": [48, 55, 72, 73, 74, 78], "henc": [48, 53, 69, 70, 87, 88], "integr": [48, 63, 70, 78, 88], "constructor": [48, 81, 82], "mpl": [48, 54, 79, 81], "sn": [48, 54, 79, 81], "That": 48, "theme": [48, 52], "place": [48, 62, 90], "befor": [48, 50, 53, 55, 69, 85, 88, 90, 96], "creation": [48, 52, 55, 70], "topic": 48, "set_them": 48, "style": 48, "darkgrid": 48, "ani": [48, 53, 54, 55, 66, 69, 81, 89, 90, 93], "whitegrid": 48, "dark": [48, 54, 91, 93], "white": [48, 49], "tick": [48, 55, 81], "These": [48, 49, 52, 68, 69, 88], "dai": 48, "collect": [48, 54, 63, 66, 76, 78, 87, 91], "experi": [48, 81, 96], "them": [48, 50, 78, 82], "magic": 48, "caveat": 48, "stai": 48, "aliv": [48, 49, 82, 88], "finish": [48, 49, 78, 81, 88], "mean": [48, 49, 54, 62, 65, 66], "poll": [48, 81, 88], "stop": [48, 54, 79, 81, 88, 91, 92], "termin": [48, 49, 50, 51, 54, 79, 81, 88, 91, 92, 93, 96], "kill": 48, "request": [48, 62, 81, 88], "folder": [48, 52, 96], "info": [48, 54, 55, 66, 69, 81, 88], "mention": 48, "platform": [48, 49, 52, 54, 79, 80, 82, 88], "graphic": [48, 52], "interfac": [48, 49, 50, 91, 93], "gui": [48, 49, 82], "sometim": [48, 49, 70], "might": [48, 49, 58], "exactli": 48, "except": [48, 53, 70], "insid": [48, 52], "kan": 48, "server": [48, 81], "view": [48, 81], "browser": 48, "launch": 48, "flicker": 48, "serv": [48, 81], "pertin": [48, 49, 84], "x_rang": 48, "attribut": [48, 62, 66, 81, 89], "http": [48, 70, 75, 90], "discours": 48, "org": [48, 90], "1586": 48, "upon": [48, 52, 53, 55, 77], "otherwis": [48, 62, 70, 82, 88, 90], "activ": [48, 53, 81], "similar": [48, 70, 88, 91], "curdoc": 48, "plot_width": 48, "plot_height": 48, "y_rang": 48, "add_root": 48, "bokeh_set_xlim": [48, 81], "until": [48, 49, 62, 70], "doe": [48, 53, 62, 64, 69, 70, 81, 84, 87, 91], "client": 48, "closur": 48, "hook": 48, "contact": 48, "repo": 48, "author": [48, 51, 64], "issu": [48, 51], "option": [48, 49, 52, 58, 69, 70, 72, 81, 87, 88, 96], "wide": 48, "visualis": 48, "mani": 48, "line": [48, 55, 63, 69, 81, 93], "each": [48, 55, 62, 70, 72, 93], "limit": [48, 70, 78, 81], "recent": 48, "slide": 48, "kept": [48, 88], "center": [48, 81, 90], "nice": 48, "detail": [48, 55, 92], "explan": [48, 49], "scenario": 48, "want": [48, 50], "group": [48, 50, 78, 87], "helper": [48, 55, 69, 70, 75, 89, 93, 95], "besid": [48, 49], "pass": [48, 49, 55, 81, 82, 88, 89], "registr": [48, 91], "produc": [48, 62, 88], "straight": 48, "sequenti": 48, "dataset": [48, 69, 81], "stepplot": [48, 54, 79, 81], "hold": [48, 69, 89], "mechan": [48, 49, 88], "jump": 48, "arrow": [48, 54, 79, 81], "vector": 48, "posit": [48, 62, 66, 81], "latest": 48, "radian": 48, "angl": [48, 81], "amongst": 48, "circl": 48, "counter": [48, 55, 70], "clockwis": 48, "fast": 49, "here": [49, 92], "well": [49, 74, 78, 90], "interpret": [49, 69, 70], "second": [49, 50, 69, 70, 80, 82, 90, 96], "wait": [49, 54, 70, 79, 82, 83, 84, 85, 86], "non": [49, 51, 55, 62, 74, 77, 78, 82], "There": [49, 52, 69, 88], "sever": 49, "support": [49, 51, 52, 82], "base": [49, 55, 62, 63, 64, 66, 69, 70, 72, 73, 74, 75, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96], "doesn": 49, "feedback": 49, "du": 49, "setprogressbar": [49, 54, 88, 96], "tqdm": [49, 52, 88, 96], "condit": [49, 51, 70, 88], "inaccur": 49, "togeth": [49, 50, 55, 87], "unlik": 49, "interrupt": [49, 82, 83], "event": [49, 81, 88, 89, 90, 91], "manipul": [49, 51, 81], "extern": [49, 66, 72, 81, 88], "necessari": [49, 52, 70], "basi": 49, "recap": 49, "daemon": 49, "exit": 49, "main": [49, 82], "script": [49, 58], "is_run": [49, 54, 88], "rather": 49, "low": 49, "granular": 49, "cpython": 49, "soft": 49, "anywai": 49, "potenti": 49, "signific": 49, "setrealtimeplatformthread": [49, 54, 88], "setrealtimeplatform": [49, 54, 88], "wel": 49, "wrap": 49, "box": 49, "defin": [49, 55, 69, 88], "applic": 49, "afterward": [49, 81, 85], "handl": [49, 53, 69, 74, 81, 82], "control": [49, 90], "invoc": 49, "anymor": [49, 78, 96], "realtime_gameloop_cal": [49, 54, 88], "advanc": 49, "setrealtimeplatformgameloop": [49, 54, 88], "fanci": 49, "state": [49, 88, 89, 90], "still": [49, 70, 81, 88], "yourself": [49, 82, 91], "encourag": 49, "bare": [49, 84], "bone": [49, 84], "invalid": [49, 53, 70], "understand": [49, 70], "exploit": 49, "heavili": 49, "consid": 49, "bad": [49, 55], "practic": [49, 55], "veri": [50, 90], "interest": [50, 51], "help": [50, 55, 70, 82, 87], "solv": [50, 51, 54, 55, 63, 71, 72, 73, 74, 78], "problem": [50, 53, 78, 90], "three": [50, 88, 89], "circular": [50, 53], "timeunit": 50, "math": [50, 70, 90], "contain": [50, 51, 54, 55, 56, 61, 63, 69, 70, 76, 77, 78, 81, 87, 89, 90, 92], "paramet": [50, 55, 58, 62, 63, 64, 66, 69, 70, 72, 73, 74, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "semant": [50, 64, 87, 88], "equivel": 50, "accumul": 50, "against": [50, 81, 87], "equival": 50, "love": 50, "interpol": [50, 54, 65, 69, 90, 91, 92], "10th": 50, "packag": [51, 52, 56, 68, 88, 89], "marc": [51, 64, 87], "provost": [51, 64, 87], "han": 51, "vangheluw": 51, "joachim": 51, "denil": 51, "claudio": 51, "gome": 51, "randi": 51, "paredi": 51, "longer": [51, 52], "mere": [51, 78, 88], "written": [51, 87, 88, 92], "drawioconvert": 51, "standalon": 51, "changelog": 51, "solut": [51, 62, 63, 77], "baseblock": [51, 54, 55, 66, 69, 70, 78, 87, 91, 92, 94], "subclass": [51, 87, 88, 91, 92, 94], "notimplementederror": 51, "valueerror": [51, 64, 91], "specifi": [51, 77, 82, 83, 84, 85, 86, 89], "influenc": [51, 55, 64, 70, 88], "member": [51, 64, 87], "graph": [51, 52, 55, 64, 70, 81, 87], "cannot": [51, 70, 81, 88], "linear": [51, 54, 65, 69, 72, 74, 90], "warn": [51, 55, 70], "did": [51, 81], "importerror": 51, "partial": [51, 87], "congruenti": 51, "gameloop": [51, 54, 79, 82, 88], "configur": [51, 62, 96], "submodul": [51, 52], "fix": [51, 55, 70, 88], "adapt": [51, 70, 77, 78], "subpackag": 51, "vermin": 52, "seaborn": [52, 54, 79, 81], "convers": [52, 56], "lark": 52, "directli": 52, "textual": [52, 63], "languag": 52, "hybrid": 52, "dev": 52, "sphinx": 52, "few": 52, "src": [52, 96], "pythonpath": 52, "sy": 52, "program": [52, 70], "recogn": 52, "thing": [52, 80], "editor": 52, "pycharm": 52, "directori": 52, "sourc": [52, 55, 58, 62, 63, 64, 66, 69, 70, 72, 73, 74, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "setup": [52, 62, 88, 96], "pip": 52, "technic": [52, 70, 81], "pycbd_vers": [52, 54, 95], "python_vers": [52, 54, 95], "enum": [52, 54, 55, 89, 95], "hash64": [52, 54, 55, 95], "unhash64": [52, 54, 95], "Not": [53, 81, 96], "flawlessli": 53, "aris": 53, "thrown": [53, 70], "try": 53, "inherit": 53, "invalidli": 53, "occur": [53, 87, 88, 89], "consequ": 53, "overwrit": [53, 62, 87, 88], "indic": [53, 62, 81, 93, 96], "usual": [53, 90], "due": [53, 84], "found": [53, 69], "gaussian": 53, "jordan": [53, 72], "gaussianjordanlinearsolv": 53, "reduct": 53, "break": 53, "hint": 53, "share": 53, "meant": [53, 63, 70, 88], "dissip": 53, "negatorblock": [54, 63, 65, 70], "inverterblock": [54, 63, 65, 70], "getnumberofinput": [54, 65, 70], "defaultinputportnameidentifi": [54, 55, 65, 70], "rootblock": [54, 63, 65, 70], "powerblock": [54, 63, 65, 70], "absblock": [54, 65, 70], "intblock": [54, 65, 70], "clampblock": [54, 65, 70], "getblockoper": [54, 65, 70], "minblock": [54, 65, 70], "maxblock": [54, 65, 70], "lessthanblock": [54, 63, 65, 70], "equalsblock": [54, 63, 65, 70], "lessthanorequalsblock": [54, 63, 65, 70], "notblock": [54, 63, 65, 70], "orblock": [54, 63, 65, 70], "andblock": [54, 63, 65, 70], "multiplexerblock": [54, 65, 70], "splitblock": [54, 65, 70], "getnumberofoutput": [54, 65, 70], "getdepend": [54, 55, 64, 65, 70], "loggingblock": [54, 65, 70], "addoneblock": [54, 65, 70], "getstarttim": [54, 65, 70], "gettim": [54, 65, 70, 88], "getrelativetim": [54, 65, 70, 88], "setstarttim": [54, 65, 70], "getdeltat": [54, 65, 70, 88], "reset": [54, 55, 65, 66, 70], "sequenceblock": [54, 65, 70], "last": [54, 55, 65, 66, 69, 70, 77, 81], "readcsv": [54, 65, 69], "writecsv": [54, 65, 69], "collectorblock": [54, 65, 66], "data_xi": [54, 65, 66, 81], "distance_from_last": [54, 65, 66], "distance_from_start": [54, 65, 66], "statisticscollectorblock": [54, 65, 66], "count": [54, 55, 65, 66], "min": [54, 65, 66, 70], "max": [54, 65, 66, 70], "sumofsquar": [54, 65, 66], "varianc": [54, 65, 66], "sleep": [54, 79, 80], "set_data_gett": [54, 79, 81], "get_data": [54, 79, 81], "get_anim": [54, 79, 81], "close_ev": [54, 79, 81], "is_open": [54, 79, 81], "set_kind_arg": [54, 79, 81], "hide": [54, 79, 81], "toggl": [54, 79, 81], "plotkind": [54, 79, 81], "is_backend": [54, 79, 81], "all_open": [54, 79, 81], "unregist": [54, 79, 81], "gla": [54, 79, 82, 88], "is_al": [54, 79, 82], "run_on_new_thread": [54, 79, 82], "hastrac": [54, 91], "thread_loop": [54, 91], "registertrac": [54, 91], "deregistertrac": [54, 91], "starttrac": [54, 91, 92], "stoptrac": [54, 91, 92], "getbyid": [54, 91], "tracestartnewiter": [54, 91, 92, 94], "traceendnewiter": [54, 91], "tracecomput": [54, 91, 92, 94], "traceendsimul": [54, 91, 92], "uncolor": [54, 91, 93], "rainbow": [54, 91, 93], "endc": [54, 91, 93], "bold": [54, 91, 93], "ital": [54, 91, 93], "ulin": [54, 91, 93], "blink": [54, 91, 93], "strike": [54, 91, 93], "uulin": [54, 91, 93], "olin": [54, 91, 93], "darkgrai": [54, 91, 93], "green": [54, 91, 93], "yellow": [54, 91, 93], "blue": [54, 91, 93], "purpl": [54, 91, 93], "cyan": [54, 91, 93], "lightgrai": [54, 91, 93], "bdarkgrai": [54, 91, 93], "bred": [54, 91, 93], "bgreen": [54, 91, 93], "byellow": [54, 91, 93], "bblue": [54, 91, 93], "bpurpl": [54, 91, 93], "bcyan": [54, 91, 93], "blightgrai": [54, 91, 93], "ldarkgrai": [54, 91, 93], "lred": [54, 91, 93], "lgreen": [54, 91, 93], "lyellow": [54, 91, 93], "lblue": [54, 91, 93], "lpurpl": [54, 91, 93], "lcyan": [54, 91, 93], "llightgrai": [54, 91, 93], "bldarkgrai": [54, 91, 93], "blred": [54, 91, 93], "blgreen": [54, 91, 93], "blyellow": [54, 91, 93], "blblue": [54, 91, 93], "blpurpl": [54, 91, 93], "blcyan": [54, 91, 93], "bllightgrai": [54, 91, 93], "setmodelnam": [54, 91, 92], "setinterpol": [54, 91, 92], "getinterpol": [54, 91, 92], "openfil": [54, 91, 92], "closefil": [54, 91, 92], "traceenditer": [54, 91, 92], "traceln": [54, 91, 92], "timeinfo": [54, 91, 92], "verbosetrac": [54, 91, 94], "default_config": [54, 56, 61, 62], "get_block_equ": [54, 56, 61, 62], "eq": [54, 56, 61, 62, 63], "simplify_link": [54, 56, 61, 62], "is_absolut": [54, 56, 61, 63], "is_rel": [54, 56, 61, 63], "get_depend": [54, 56, 61, 63], "fnc": [54, 56, 61, 63, 74], "multifnc": [54, 56, 61, 63], "unaryfnc": [54, 56, 61, 63], "binaryfnc": [54, 56, 61, 63], "constantfnc": [54, 56, 61, 63], "varfnc": [54, 56, 61, 63], "delayfnc": [54, 56, 61, 63], "derivatorfnc": [54, 56, 61, 63], "integratorfnc": [54, 56, 61, 63], "block_map": [54, 56, 61, 62, 63], "gvdraw": [54, 56, 58], "checkvalid": [54, 71, 72, 73, 74], "get_matrix": [54, 71, 72], "matrix": [54, 71, 72, 77], "concat": [54, 71, 72], "getcomponentcach": [54, 71, 74], "direct": [54, 55, 81, 89, 90], "from_below": [54, 89], "from_abov": [54, 89], "stateev": [54, 88, 89], "precrossingstateeventloc": [54, 89, 90], "postcrossingstateeventloc": [54, 89, 90], "linearstateeventloc": [54, 89, 90], "bisectionstateeventloc": [54, 89, 90], "regulafalsistateeventloc": [54, 88, 89, 90], "itpstateeventloc": [54, 89, 90], "addrow": [54, 76, 77], "addweight": [54, 76, 77], "getnod": [54, 76, 77], "getweight": [54, 76, 77], "geta": [54, 76, 77], "getord": [54, 76, 77], "euler": [54, 70, 76, 77], "heun": [54, 76, 77], "heuneul": [54, 76, 77], "ralston": [54, 76, 77], "ralstoneul": [54, 76, 77], "midpoint": [54, 76, 77], "midpointeul": [54, 76, 77], "rk4": [54, 76, 77], "rk4alt": [54, 76, 77], "dopri": [54, 76, 77], "rkdp": [54, 76, 77], "dormandprinc": [54, 76, 77], "rkck": [54, 76, 77], "cashkarp": [54, 76, 77], "bogackishampin": [54, 76, 77], "create_ivp": [54, 76, 78], "create_rk": [54, 76, 78], "create_k": [54, 76, 78], "create_error": [54, 76, 78], "inputlink": [54, 55], "getoutgo": [54, 55], "getincom": [54, 55], "gethistori": [54, 55], "getpreviousportclosur": [54, 55], "getnextportclosur": [54, 55], "getpath": [54, 55], "disconnect": [54, 55], "connector": [54, 55], "transfer": [54, 55], "addinputport": [54, 55], "addoutputport": [54, 55], "removeinputport": [54, 55], "getinputport": [54, 55], "getinputportnam": [54, 55], "getinputportbynam": [54, 55], "hasinputportwithnam": [54, 55], "getoutputport": [54, 55], "getoutputportbynam": [54, 55], "hasoutputportwithnam": [54, 55], "reparentport": [54, 55], "clone": [54, 55, 78], "getblocknam": [54, 55], "getfunctionnam": [54, 55], "setblocknam": [54, 55], "setpar": [54, 55], "getblocktyp": [54, 55], "getclock": [54, 55, 88], "appendtosign": [54, 55], "clearport": [54, 55], "resetport": [54, 55], "getportconnectedtoinput": [54, 55], "getinputsign": [54, 55], "unlinkinput": [54, 55], "gettopcbd": [54, 55], "getblock": [54, 55], "getblockbynam": [54, 55], "hasblock": [54, 55], "clearblock": [54, 55], "removeblock": [54, 55], "removeconnect": [54, 55], "dump": [54, 55], "dumpsign": [54, 55], "clearsign": [54, 55], "getallsignalnam": [54, 55], "getuniqueblocknam": [54, 55], "depnod": [54, 64], "unmark": [54, 64], "ismark": [54, 64], "getmappedobj": [54, 64], "addmemb": [54, 64], "hasmemb": [54, 64], "removememb": [54, 64], "setdepend": [54, 64], "hasdepend": [54, 64], "unsetdepend": [54, 64], "getinfluenc": [54, 64], "getsemanticmap": [54, 64], "createdepgraph": [54, 64], "gvdepgraph": [54, 64], "mustcomput": [54, 87], "setrat": [54, 87], "topologicalschedul": [54, 87, 88], "toposort": [54, 87], "dfssort": [54, 87], "dfscollect": [54, 87], "setcommunicationinterv": [54, 88], "setschedul": [54, 88], "setalgebraicloopsolv": [54, 88], "setstateeventloc": [54, 88], "registerstateev": [54, 88], "setblockr": [54, 88], "setterminationtim": [54, 88, 96], "setcustomtrac": [54, 88], "setverbos": [54, 88], "tupl": [55, 69, 77, 78, 81, 88, 90, 91], "alia": [55, 77], "str": [55, 58, 62, 63, 66, 69, 70, 72, 73, 74, 81, 82, 87, 88, 89, 91, 92, 93, 95], "belong": 55, "outgo": 55, "mainli": 55, "histori": 55, "incom": [55, 70], "histor": 55, "useless": 55, "whose": 55, "eventu": 55, "whom": 55, "sep": [55, 72], "static": [55, 62, 63, 69, 72, 77, 81, 93], "target": 55, "end": [55, 62, 69, 77, 78, 88, 90, 91, 92, 93], "type": [55, 63, 69, 78, 81, 82, 91], "encod": 55, "id": [55, 77, 91, 95], "alphanumer": 55, "charact": [55, 62], "list": [55, 62, 63, 66, 69, 70, 72, 73, 74, 77, 78, 81, 82, 87, 88, 91, 93], "deep": 55, "parent": [55, 62, 87], "name_output": 55, "append": [55, 62, 91, 92], "curiter": [55, 64, 66, 69, 70, 72, 91], "specif": [55, 63, 64, 70, 78, 81, 87, 88, 91, 92, 94], "out": [55, 64, 69, 70, 93], "omit": [55, 70, 78], "ignore_par": 55, "level": [55, 62, 70, 72, 73, 74, 78, 81, 88, 89, 90], "separ": [55, 62, 75, 88], "bool": [55, 62, 63, 69, 70, 81, 88, 91, 92], "whether": [55, 88, 91], "grandchild": 55, "child": 55, "turn": 55, "oper": [55, 62, 66, 69, 70, 95], "select": [55, 70], "Be": [55, 70], "analyz": [55, 66, 70], "integ": [55, 70], "auto": [55, 70], "increment": [55, 70], "yet": [55, 70, 90], "in_block": 55, "name_input": 55, "unlink": 55, "indent": 55, "amount": [55, 62, 66, 70, 77, 80, 81, 90, 91], "entir": 55, "causal": 55, "highest": [55, 81], "psep": 55, "inlin": 55, "recurs": [55, 63, 64, 78], "sub": [55, 64, 90], "check": [55, 63, 64, 70, 72, 73, 74, 81, 82, 87, 89, 91], "prefix": [55, 62, 78], "start_tim": [55, 70], "Their": 55, "assumpt": [55, 70], "rel": [55, 63, 70, 90], "independ": [55, 56, 66, 70, 80, 81, 88], "accuraci": [55, 70, 77, 90], "forbidden": [55, 70], "misus": [55, 70, 88], "word": [55, 70], "guarante": [55, 70, 88], "context": [55, 70, 81], "export": [55, 70], "formal": [55, 70], "replac": [55, 62, 70], "loss": [55, 70], "from_block": 55, "to_block": 55, "outport_port_nam": 55, "unset": [55, 88, 92], "submodel": [55, 78], "hash": [55, 95], "fetch": 55, "within": 55, "form": [55, 63, 66, 69, 77, 78, 81], "suffix": 55, "valid": [55, 66, 72, 73, 74, 90, 96], "pertain": 56, "cbddraw": 58, "filenam": [58, 69, 88, 92, 94], "rankdir": 58, "lr": 58, "clunki": 58, "messi": 58, "dot": 58, "engin": 58, "neato": 58, "twopi": 58, "circo": 58, "cleaner": [58, 62], "readabl": 58, "tb": 58, "dict": [58, 62, 69, 87], "dictionari": [58, 62, 64, 78, 87], "blocknam": 58, "kwarg": [62, 69, 81], "ignore_path": 62, "escape_nonlatex": 62, "underscor": 62, "escap": 62, "time_vari": 62, "time_format": 62, "parenthes": 62, "replace_par": 62, "right": [62, 78, 81], "type_format": [62, 63], "operationtyp": 62, "callabl": [62, 82, 83, 84, 85, 86, 89, 90, 91], "remap": 62, "symbol": [62, 63], "path_sep": 62, "path_prefix": 62, "config": 62, "rl": 62, "pars": [62, 69], "care": [62, 87], "largest": [62, 66], "neg": [62, 66, 81], "converg": 62, "reach": [62, 78, 81], "improv": 63, "numer": [63, 66, 70, 77, 78, 87, 91, 92, 94], "absolut": [63, 70, 78], "lh": 63, "rh": 63, "f": [63, 78, 90], "lefthandsid": 63, "righthandsid": 63, "eq_tim": 63, "superclass": [63, 73, 81], "evalu": [63, 70], "reli": 63, "product": [63, 70], "unari": 63, "binari": 63, "deriv": [63, 70], "map": [63, 64, 87], "known": [63, 70, 72, 90, 93], "own": [63, 96], "node": [64, 77, 87], "ignore_hierarchi": 64, "rais": [64, 69, 70, 81, 88, 91], "deped": 64, "differenti": 64, "watch": 64, "flat": 64, "don": [64, 91], "abstract": [66, 81], "possibli": [66, 70], "content": [66, 69], "statist": 66, "interfer": 66, "retain": 66, "properti": [66, 88, 89], "arriv": 66, "maxim": [66, 70, 78, 81, 90], "unzip": 66, "parametr": 66, "x1": [66, 81], "y1": [66, 81], "distanc": [66, 81], "summari": 66, "less": [66, 70, 90], "intens": 66, "back": [66, 95], "item": [66, 72], "captur": [66, 81], "smallest": 66, "squar": 66, "averag": [66, 90], "deviat": 66, "element": [69, 72, 77, 78, 81, 86, 88], "satisfi": 69, "file_nam": 69, "time_col": 69, "repeat": 69, "timestamp": 69, "furthermor": 69, "prohibit": 69, "fall": 69, "record": 69, "sampl": 69, "higher": [69, 77, 78, 81], "predefin": [69, 77], "expect": [69, 70, 88], "kei": 69, "dtype": 69, "overrid": 69, "dialect": 69, "excel": 69, "nan": 69, "insert": 69, "miss": 69, "messag": 69, "destroi": 69, "pointer": 69, "front": 69, "dictwrit": 69, "tune": 70, "negat": 70, "toler": [70, 78], "invert": 70, "invers": 70, "throw": 70, "zerodivisionerror": 70, "numberofinput": 70, "addendend": 70, "total": [70, 81], "factor": [70, 78], "modulo": 70, "divis": 70, "dividend": 70, "divisor": 70, "remaind": 70, "fmod": 70, "th": 70, "sqrt": [70, 90], "radicand": 70, "expon": 70, "ab": 70, "floor": 70, "use_const": 70, "clamp": [70, 78], "satur": 70, "respect": [70, 77], "in3": 70, "fmu": 70, "plain": 70, "falsi": [70, 90], "truthi": 70, "boolean": 70, "similaryli": 70, "greater": [70, 88], "relationship": 70, "swap": [70, 93], "around": [70, 81, 82, 88], "equal": [70, 81], "least": [70, 81], "multiplex": 70, "choos": 70, "indexerror": 70, "though": [70, 88], "definit": 70, "ideal": 70, "numberofoutput": 70, "clariti": 70, "ness": 70, "out2": 70, "stepsiz": [70, 78, 88], "predict": 70, "complic": 70, "frame": [70, 81], "logic": [70, 75, 78, 89], "videogam": 70, "world": 70, "drewcampbell92": 70, "medium": 70, "com": [70, 75], "b53bf4781a03": 70, "helperblock": 70, "extran": 70, "prefer": 70, "realli": [70, 84], "lev": 70, "logger": [70, 72, 73, 74, 75], "cbdlogger": 70, "mux": 70, "calcul": 70, "backward": [70, 88], "accord": [70, 90], "rule": [70, 77], "start_delta": 70, "present": 70, "h": [70, 78, 92, 95], "rel_tim": 70, "restart": 70, "Will": [70, 81, 90], "gauss": 72, "matric": 72, "strongcompon": 72, "consist": [72, 78], "m1": 72, "coeffici": [72, 77], "m2": 72, "solverinput": [72, 73, 74], "col": 72, "slow": 72, "n": [72, 78, 81, 90], "slower": [72, 88], "numpi": 72, "further": [72, 88], "hardwar": 72, "segment": 72, "chunk": 72, "000": 72, "paren": 72, "4f": 72, "eol": 72, "sympi": 74, "lst": 74, "stackoverflow": 75, "384125": 75, "futur": 75, "Its": 75, "syslog": 75, "who": [76, 78], "tabl": [77, 88], "weight": 77, "mnemon": 77, "devic": 77, "stage": 77, "a_": [77, 78], "ij": 77, "leq": 77, "j": 77, "b_i": [77, 78], "_i": 77, "c_i": 77, "arrai": [77, 81], "ccccc": 77, "c_2": 77, "c_3": 77, "vdot": 77, "ddot": 77, "c_": [77, 78], "hline": 77, "b_1": 77, "b_2": 77, "b_": 77, "_1": 77, "_2": 77, "vert": [77, 78], "instanti": [77, 88, 92], "elem": 77, "foral": 77, "bottom": 77, "wix": 77, "cc": 77, "2nd": 77, "32": 77, "12": 77, "1932": 77, "2197": 77, "7200": 77, "7296": 77, "439": 77, "216": 77, "3680": 77, "513": 77, "845": 77, "4104": 77, "27": 77, "3544": 77, "2565": 77, "1859": 77, "11": 77, "40": [77, 78], "16": [77, 78], "135": 77, "6656": 77, "12825": 77, "28561": 77, "56430": 77, "50": [77, 88], "1408": 77, "dormand": 77, "princ": 77, "ode45": 77, "matlab": 77, "gnu": 77, "octav": 77, "among": 77, "44": 77, "45": 77, "56": 77, "19372": 77, "6561": 77, "25360": 77, "2187": 77, "64448": 77, "212": 77, "729": 77, "9017": 77, "3168": 77, "355": 77, "33": 77, "46732": 77, "5247": 77, "49": 77, "176": 77, "5103": 77, "18656": 77, "35": 77, "384": 77, "1113": 77, "125": 77, "192": 77, "6784": 77, "5179": 77, "57600": 77, "7571": 77, "16695": 77, "393": 77, "640": 77, "92097": 77, "339200": 77, "187": 77, "2100": 77, "cash": 77, "karp": 77, "54": 77, "70": 77, "1631": 77, "55296": 77, "175": 77, "512": 77, "575": 77, "13824": 77, "44275": 77, "110592": 77, "253": 77, "4096": 77, "37": 77, "378": 77, "250": 77, "621": 77, "594": 77, "1771": 77, "2825": 77, "27648": 77, "18575": 77, "48384": 77, "13525": 77, "277": 77, "14336": 77, "bogacki": 77, "shampin": 77, "3th": 77, "ode23": 77, "24": 77, "08": 78, "hmax": 78, "approxim": 78, "dfrac": 78, "dy": 78, "preferr": 78, "high": 78, "commonli": [78, 93], "approx": 78, "fuction": 78, "undefin": [78, 88], "match": 78, "ind": 78, "rel_": 78, "outd": 78, "steer": 78, "sport": 78, "visit": [78, 87], "depth": [78, 87], "search": [78, 87], "exclud": [78, 81], "halt": 78, "branch": 78, "detect": [78, 90], "ivp": 78, "plink": 78, "determin": [78, 81], "weigh": 78, "y_": 78, "y_n": 78, "sum_": 78, "k_i": 78, "k_": 78, "t_n": 78, "vlen": 78, "h_": 78, "epsilon": 78, "z_": 78, "q": 78, "lowest": [78, 81], "z": 78, "pessimist": 78, "approach": 78, "press": 78, "william": 78, "saul": 78, "teukolski": 78, "vetterl": 78, "brian": 78, "flanneri": 78, "2007": 78, "recip": 78, "3rd": 78, "art": 78, "scientif": 78, "chapter": 78, "pp": 78, "714": 78, "722": 78, "cambridg": 78, "univers": 78, "imposs": 81, "prematur": 81, "kind": 81, "real": [81, 82, 88], "knowledg": 81, "resourc": 81, "develop": 81, "2xn": 81, "x2": 81, "x3": 81, "y2": 81, "y3": 81, "axxept": 81, "millisecond": [81, 88], "refresh": 81, "anim": 81, "save": 81, "arg": [81, 82, 88, 91], "accept": [81, 88, 90], "preupdat": 81, "No": [81, 85], "associ": [81, 88], "getter": 81, "open": [81, 92], "process": [81, 84, 88], "inf": [81, 88], "upper_bound": 81, "perc_keep": 81, "enough": [81, 84], "down": 81, "shorten": 81, "bound": [81, 90], "li": 81, "outsid": 81, "infin": 81, "upper": [81, 90], "lower_limit": 81, "rescal": 81, "beyond": 81, "upper_limit": 81, "percentag": 81, "opposit": 81, "middl": 81, "strictli": 81, "width": 81, "margin": 81, "edg": 81, "shape": 81, "those": 81, "coordin": [81, 90], "drawstyl": 81, "pre": 81, "2d": 81, "space": 81, "central": 81, "handler_nam": 81, "event_nam": 81, "forcibli": 81, "shorthand": 81, "bokeh_set_ylim": 81, "02": 81, "loop_alt": 82, "subsystem": [82, 83, 84, 85, 86, 88], "insensit": 82, "func": [82, 83, 84, 85, 86, 88], "perform": [82, 83, 84, 87], "game": [82, 83, 84, 88], "param": [82, 91], "faster": [83, 88], "natur": 84, "seper": [84, 85], "inter": 86, "recompute_at": 87, "travers": 87, "semi": 87, "virtual": [87, 92], "strongli": 87, "indentifi": 87, "fire": 87, "tarjan": 87, "sortedlist": 87, "strong": [87, 88], "handi": 88, "term_tim": [88, 91], "upto": 88, "decim": [88, 90], "offset": 88, "unnecessari": 88, "compat": 88, "setsteps": 88, "stel": 88, "cross": [88, 89, 90], "stateeventloc": [88, 90], "block_path": 88, "enabl": [88, 93], "disabl": 88, "progressbar": 88, "hijack": 88, "shall": 88, "intend": 88, "choic": 88, "idea": 88, "safe": 88, "prestep": 88, "st": 88, "poststep": 88, "o": [88, 93], "clock_upd": 88, "classnam": [88, 91], "thu": 88, "ineffici": 88, "verbos": [88, 94], "union": 88, "output_nam": [89, 90], "op": 89, "rough": 90, "under": 90, "p1": 90, "p2": 90, "ever": 90, "shift": 90, "toward": 90, "suspect": 90, "statement": 90, "modelica": 90, "wherea": 90, "mostli": 90, "bisect": 90, "regula": 90, "roughli": 90, "gain": 90, "ep": 90, "05": 90, "5000000": 90, "illinoi": 90, "half": 90, "million": 90, "en": 90, "wikipedia": 90, "wiki": 90, "regula_falsi": 90, "k1": 90, "k2": 90, "n0": 90, "truncat": 90, "hyperparamet": 90, "infti": 90, "frac": 90, "slack": 90, "itp_method": 90, "uid": [91, 92, 94], "recov": [91, 92], "interp": 91, "model_nam": [91, 92], "stime": [91, 92], "header": 92, "newlin": 92, "concaten": 93, "vt100": 93, "emul": 93, "ansicon": 93, "On": 93, "bag": 93, "letter": 93, "x1b": 93, "0m": 93, "creep": 93, "1m": 93, "2m": 93, "darker": 93, "3m": 93, "slant": 93, "cursiv": 93, "4m": 93, "underlin": 93, "5m": 93, "cursor": 93, "7m": 93, "foreground": 93, "background": 93, "9m": 93, "strikethrough": 93, "21m": 93, "doubli": 93, "53m": 93, "overlin": 93, "30m": 93, "grai": 93, "palett": 93, "31m": 93, "32m": 93, "33m": 93, "34m": 93, "35m": 93, "36m": 93, "37m": 93, "light": 93, "40m": 93, "41m": 93, "42m": 93, "43m": 93, "44m": 93, "45m": 93, "46m": 93, "47m": 93, "90m": 93, "lighter": 93, "91m": 93, "92m": 93, "93m": 93, "94m": 93, "95m": 93, "96m": 93, "97m": 93, "100m": 93, "101m": 93, "102m": 93, "103m": 93, "104m": 93, "105m": 93, "106m": 93, "107m": 93, "short": 95, "sensit": 95, "local": 96, "distribut": 96, "mymodel": 96, "elabor": 96, "cond": 96, "come": 96, "unittest": 96, "discov": 96}, "objects": {"": [[54, 0, 0, "-", "pyCBD"]], "pyCBD": [[55, 0, 0, "-", "Core"], [56, 0, 0, "-", "converters"], [64, 0, 0, "-", "depGraph"], [65, 0, 0, "-", "lib"], [71, 0, 0, "-", "loopsolvers"], [75, 0, 0, "-", "naivelog"], [76, 0, 0, "-", "preprocessing"], [79, 0, 0, "-", "realtime"], [87, 0, 0, "-", "scheduling"], [88, 0, 0, "-", "simulator"], [89, 0, 0, "-", "state_events"], [91, 0, 0, "-", "tracers"], [95, 0, 0, "-", "util"]], "pyCBD.Core": [[55, 1, 1, "", "BaseBlock"], [55, 1, 1, "", "CBD"], [55, 1, 1, "", "Connector"], [55, 1, 1, "", "InputLink"], [55, 1, 1, "", "Port"], [55, 1, 1, "", "Signal"]], "pyCBD.Core.BaseBlock": [[55, 2, 1, "", "addInputPort"], [55, 2, 1, "", "addOutputPort"], [55, 2, 1, "", "appendToSignal"], [55, 2, 1, "", "clearPorts"], [55, 2, 1, "", "clone"], [55, 2, 1, "", "compute"], [55, 2, 1, "", "defaultInputPortNameIdentifier"], [55, 2, 1, "", "getBlockName"], [55, 2, 1, "", "getBlockType"], [55, 2, 1, "", "getClock"], [55, 2, 1, "", "getDependencies"], [55, 2, 1, "", "getFunctionName"], [55, 2, 1, "", "getInputPortByName"], [55, 2, 1, "", "getInputPortNames"], [55, 2, 1, "", "getInputPorts"], [55, 2, 1, "", "getInputSignal"], [55, 2, 1, "", "getOutputPortByName"], [55, 2, 1, "", "getOutputPortNames"], [55, 2, 1, "", "getOutputPorts"], [55, 2, 1, "", "getPath"], [55, 2, 1, "", "getPortConnectedToInput"], [55, 2, 1, "", "getSignalHistory"], [55, 2, 1, "", "hasInputPortWithName"], [55, 2, 1, "", "hasOutputPortWithName"], [55, 2, 1, "", "info"], [55, 2, 1, "", "linkToInput"], [55, 2, 1, "", "removeInputPort"], [55, 2, 1, "", "reparentPorts"], [55, 2, 1, "", "resetPorts"], [55, 2, 1, "", "setBlockName"], [55, 2, 1, "", "setParent"], [55, 2, 1, "", "unlinkInput"]], "pyCBD.Core.CBD": [[55, 2, 1, "", "addBlock"], [55, 2, 1, "", "addConnection"], [55, 2, 1, "", "addFixedRateClock"], [55, 2, 1, "", "clearBlocks"], [55, 2, 1, "", "clearSignals"], [55, 2, 1, "", "clone"], [55, 2, 1, "", "compute"], [55, 2, 1, "", "dump"], [55, 2, 1, "", "dumpSignals"], [55, 2, 1, "", "find"], [55, 2, 1, "", "flatten"], [55, 2, 1, "", "flattened"], [55, 2, 1, "", "getAllSignalNames"], [55, 2, 1, "", "getBlockByName"], [55, 2, 1, "", "getBlocks"], [55, 2, 1, "", "getClock"], [55, 2, 1, "", "getDependencies"], [55, 2, 1, "", "getSignalHistory"], [55, 2, 1, "", "getSignals"], [55, 2, 1, "", "getTopCBD"], [55, 2, 1, "", "getUniqueBlockName"], [55, 2, 1, "", "hasBlock"], [55, 2, 1, "", "info"], [55, 2, 1, "", "removeBlock"], [55, 2, 1, "", "removeConnection"]], "pyCBD.Core.Connector": [[55, 2, 1, "", "transfer"]], "pyCBD.Core.InputLink": [[55, 3, 1, "", "block"], [55, 3, 1, "", "output_port"]], "pyCBD.Core.Port": [[55, 3, 1, "", "Direction"], [55, 2, 1, "", "clear"], [55, 2, 1, "", "connect"], [55, 2, 1, "", "count"], [55, 2, 1, "", "disconnect"], [55, 2, 1, "", "get"], [55, 2, 1, "", "getDependencies"], [55, 2, 1, "", "getHistory"], [55, 2, 1, "", "getIncoming"], [55, 2, 1, "", "getNextPortClosure"], [55, 2, 1, "", "getOutgoing"], [55, 2, 1, "", "getPath"], [55, 2, 1, "", "getPreviousPortClosure"], [55, 2, 1, "", "reset"], [55, 2, 1, "", "set"]], "pyCBD.Core.Signal": [[55, 3, 1, "", "time"], [55, 3, 1, "", "value"]], "pyCBD.converters": [[58, 0, 0, "-", "CBDDraw"]], "pyCBD.converters.CBDDraw": [[58, 4, 1, "", "gvDraw"]], "pyCBD.converters.latexify": [[62, 0, 0, "-", "CBD2Latex"], [63, 0, 0, "-", "functions"]], "pyCBD.converters.latexify.CBD2Latex": [[62, 1, 1, "", "CBD2Latex"]], "pyCBD.converters.latexify.CBD2Latex.CBD2Latex": [[62, 3, 1, "", "DEFAULT_CONFIG"], [62, 2, 1, "", "eq"], [62, 2, 1, "", "get_block_equation"], [62, 2, 1, "", "latex"], [62, 2, 1, "", "rename"], [62, 2, 1, "", "render"], [62, 2, 1, "", "simplify"], [62, 2, 1, "", "simplify_links"], [62, 2, 1, "", "substitute"]], "pyCBD.converters.latexify.functions": [[63, 5, 1, "", "BLOCK_MAP"], [63, 1, 1, "", "BinaryFnc"], [63, 1, 1, "", "ConstantFnc"], [63, 1, 1, "", "DelayFnc"], [63, 1, 1, "", "DerivatorFnc"], [63, 1, 1, "", "Eq"], [63, 1, 1, "", "Fnc"], [63, 1, 1, "", "IntegratorFnc"], [63, 1, 1, "", "MultiFnc"], [63, 1, 1, "", "Time"], [63, 1, 1, "", "UnaryFnc"], [63, 1, 1, "", "VarFnc"]], "pyCBD.converters.latexify.functions.BinaryFnc": [[63, 2, 1, "", "create"], [63, 2, 1, "", "eq"], [63, 2, 1, "", "latex"], [63, 2, 1, "", "simplify"]], "pyCBD.converters.latexify.functions.ConstantFnc": [[63, 2, 1, "", "at"], [63, 2, 1, "", "create"], [63, 2, 1, "", "eq"], [63, 2, 1, "", "latex"]], "pyCBD.converters.latexify.functions.DelayFnc": [[63, 2, 1, "", "at"]], "pyCBD.converters.latexify.functions.DerivatorFnc": [[63, 2, 1, "", "at"], [63, 2, 1, "", "eq"], [63, 2, 1, "", "latex"]], "pyCBD.converters.latexify.functions.Eq": [[63, 2, 1, "", "apply"], [63, 2, 1, "", "at"], [63, 2, 1, "", "eq"], [63, 2, 1, "", "get_dependencies"], [63, 2, 1, "", "latex"], [63, 2, 1, "", "simplify"]], "pyCBD.converters.latexify.functions.Fnc": [[63, 2, 1, "", "apply"], [63, 2, 1, "", "at"], [63, 2, 1, "", "contains"], [63, 2, 1, "", "create"], [63, 2, 1, "", "eq"], [63, 2, 1, "", "get_dependencies"], [63, 2, 1, "", "latex"], [63, 2, 1, "", "simplify"]], "pyCBD.converters.latexify.functions.IntegratorFnc": [[63, 2, 1, "", "at"], [63, 2, 1, "", "eq"], [63, 2, 1, "", "latex"]], "pyCBD.converters.latexify.functions.MultiFnc": [[63, 2, 1, "", "create"], [63, 2, 1, "", "eq"], [63, 2, 1, "", "latex"], [63, 2, 1, "", "simplify"]], "pyCBD.converters.latexify.functions.Time": [[63, 2, 1, "", "is_absolute"], [63, 2, 1, "", "is_relative"], [63, 2, 1, "", "now"]], "pyCBD.converters.latexify.functions.UnaryFnc": [[63, 2, 1, "", "create"], [63, 2, 1, "", "eq"], [63, 2, 1, "", "latex"], [63, 2, 1, "", "simplify"]], "pyCBD.converters.latexify.functions.VarFnc": [[63, 2, 1, "", "apply"], [63, 2, 1, "", "at"], [63, 2, 1, "", "contains"], [63, 2, 1, "", "eq"], [63, 2, 1, "", "latex"]], "pyCBD.depGraph": [[64, 1, 1, "", "DepGraph"], [64, 1, 1, "", "DepNode"], [64, 4, 1, "", "createDepGraph"], [64, 4, 1, "", "gvDepGraph"]], "pyCBD.depGraph.DepGraph": [[64, 2, 1, "", "addMember"], [64, 2, 1, "", "getDependents"], [64, 2, 1, "", "getInfluencers"], [64, 2, 1, "", "getSemanticMapping"], [64, 2, 1, "", "hasDependency"], [64, 2, 1, "", "hasMember"], [64, 2, 1, "", "isMarked"], [64, 2, 1, "", "mark"], [64, 2, 1, "", "removeMember"], [64, 2, 1, "", "setDependency"], [64, 2, 1, "", "unMark"], [64, 2, 1, "", "unsetDependency"]], "pyCBD.depGraph.DepNode": [[64, 2, 1, "", "getMappedObj"], [64, 2, 1, "", "isMarked"], [64, 2, 1, "", "mark"], [64, 2, 1, "", "unMark"]], "pyCBD.lib": [[66, 0, 0, "-", "endpoints"], [68, 0, 0, "-", "extra"], [69, 0, 0, "-", "io"], [70, 0, 0, "-", "std"]], "pyCBD.lib.endpoints": [[66, 1, 1, "", "CollectorBlock"], [66, 1, 1, "", "PositionCollectorBlock"], [66, 1, 1, "", "SignalCollectorBlock"], [66, 1, 1, "", "StatisticsCollectorBlock"]], "pyCBD.lib.endpoints.CollectorBlock": [[66, 2, 1, "", "clear"], [66, 2, 1, "", "compute"], [66, 6, 1, "", "data"]], "pyCBD.lib.endpoints.PositionCollectorBlock": [[66, 2, 1, "", "clear"], [66, 2, 1, "", "compute"], [66, 6, 1, "", "data_xy"], [66, 2, 1, "", "distance_from_last"], [66, 2, 1, "", "distance_from_start"]], "pyCBD.lib.endpoints.SignalCollectorBlock": [[66, 2, 1, "", "clear"], [66, 2, 1, "", "compute"], [66, 6, 1, "", "data_xy"]], "pyCBD.lib.endpoints.StatisticsCollectorBlock": [[66, 2, 1, "", "clear"], [66, 2, 1, "", "compute"], [66, 2, 1, "", "count"], [66, 2, 1, "", "max"], [66, 2, 1, "", "mean"], [66, 2, 1, "", "min"], [66, 2, 1, "", "std"], [66, 2, 1, "", "sum"], [66, 2, 1, "", "sumOfSquares"], [66, 2, 1, "", "variance"]], "pyCBD.lib.io": [[69, 1, 1, "", "Interpolation"], [69, 1, 1, "", "ReadCSV"], [69, 1, 1, "", "WriteCSV"]], "pyCBD.lib.io.Interpolation": [[69, 3, 1, "", "FIRST"], [69, 3, 1, "", "LAST"], [69, 3, 1, "", "LINEAR"], [69, 2, 1, "", "interpolate"]], "pyCBD.lib.io.ReadCSV": [[69, 2, 1, "", "compute"]], "pyCBD.lib.io.WriteCSV": [[69, 2, 1, "", "compute"]], "pyCBD.lib.std": [[70, 1, 1, "", "AbsBlock"], [70, 1, 1, "", "AddOneBlock"], [70, 1, 1, "", "AdderBlock"], [70, 1, 1, "", "AndBlock"], [70, 1, 1, "", "ClampBlock"], [70, 1, 1, "", "Clock"], [70, 1, 1, "", "ConstantBlock"], [70, 1, 1, "", "DelayBlock"], [70, 1, 1, "", "DeltaTBlock"], [70, 1, 1, "", "DerivatorBlock"], [70, 1, 1, "", "EqualsBlock"], [70, 1, 1, "", "GenericBlock"], [70, 1, 1, "", "IntBlock"], [70, 1, 1, "", "IntegratorBlock"], [70, 1, 1, "", "InverterBlock"], [70, 1, 1, "", "LessThanBlock"], [70, 1, 1, "", "LessThanOrEqualsBlock"], [70, 1, 1, "", "LoggingBlock"], [70, 1, 1, "", "MaxBlock"], [70, 1, 1, "", "MinBlock"], [70, 1, 1, "", "ModuloBlock"], [70, 1, 1, "", "MultiplexerBlock"], [70, 1, 1, "", "NegatorBlock"], [70, 1, 1, "", "NotBlock"], [70, 1, 1, "", "OrBlock"], [70, 1, 1, "", "PowerBlock"], [70, 1, 1, "", "ProductBlock"], [70, 1, 1, "", "RootBlock"], [70, 1, 1, "", "SequenceBlock"], [70, 1, 1, "", "SplitBlock"], [70, 1, 1, "", "TimeBlock"]], "pyCBD.lib.std.AbsBlock": [[70, 2, 1, "", "compute"]], "pyCBD.lib.std.AdderBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "getNumberOfInputs"]], "pyCBD.lib.std.AndBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "getNumberOfInputs"]], "pyCBD.lib.std.ClampBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "defaultInputPortNameIdentifier"]], "pyCBD.lib.std.Clock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "getDeltaT"], [70, 2, 1, "", "getDependencies"], [70, 2, 1, "", "getRelativeTime"], [70, 2, 1, "", "getStartTime"], [70, 2, 1, "", "getTime"], [70, 2, 1, "", "reset"], [70, 2, 1, "", "setDeltaT"], [70, 2, 1, "", "setStartTime"]], "pyCBD.lib.std.ConstantBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "getValue"], [70, 2, 1, "", "setValue"]], "pyCBD.lib.std.DelayBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "getDependencies"]], "pyCBD.lib.std.DeltaTBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "getValue"]], "pyCBD.lib.std.EqualsBlock": [[70, 2, 1, "", "compute"]], "pyCBD.lib.std.GenericBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "getBlockOperator"]], "pyCBD.lib.std.IntBlock": [[70, 2, 1, "", "compute"]], "pyCBD.lib.std.InverterBlock": [[70, 2, 1, "", "compute"]], "pyCBD.lib.std.LessThanBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "defaultInputPortNameIdentifier"]], "pyCBD.lib.std.LessThanOrEqualsBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "defaultInputPortNameIdentifier"]], "pyCBD.lib.std.LoggingBlock": [[70, 2, 1, "", "compute"]], "pyCBD.lib.std.MaxBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "getNumberOfInputs"]], "pyCBD.lib.std.MinBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "getNumberOfInputs"]], "pyCBD.lib.std.ModuloBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "defaultInputPortNameIdentifier"]], "pyCBD.lib.std.MultiplexerBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "defaultInputPortNameIdentifier"], [70, 2, 1, "", "getNumberOfInputs"]], "pyCBD.lib.std.NegatorBlock": [[70, 2, 1, "", "compute"]], "pyCBD.lib.std.NotBlock": [[70, 2, 1, "", "compute"]], "pyCBD.lib.std.OrBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "getNumberOfInputs"]], "pyCBD.lib.std.PowerBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "defaultInputPortNameIdentifier"]], "pyCBD.lib.std.ProductBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "getNumberOfInputs"]], "pyCBD.lib.std.RootBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "defaultInputPortNameIdentifier"]], "pyCBD.lib.std.SequenceBlock": [[70, 2, 1, "", "compute"]], "pyCBD.lib.std.SplitBlock": [[70, 2, 1, "", "compute"], [70, 2, 1, "", "getNumberOfOutputs"]], "pyCBD.lib.std.TimeBlock": [[70, 2, 1, "", "compute"]], "pyCBD.loopsolvers": [[72, 0, 0, "-", "linearsolver"], [73, 0, 0, "-", "solver"], [74, 0, 0, "-", "sympysolver"]], "pyCBD.loopsolvers.linearsolver": [[72, 1, 1, "", "LinearSolver"], [72, 1, 1, "", "Matrix"]], "pyCBD.loopsolvers.linearsolver.LinearSolver": [[72, 2, 1, "", "checkValidity"], [72, 2, 1, "", "constructInput"], [72, 2, 1, "", "get_matrix"], [72, 2, 1, "", "solve"]], "pyCBD.loopsolvers.linearsolver.Matrix": [[72, 2, 1, "", "concat"], [72, 2, 1, "", "format"]], "pyCBD.loopsolvers.solver": [[73, 1, 1, "", "Solver"]], "pyCBD.loopsolvers.solver.Solver": [[73, 2, 1, "", "checkValidity"], [73, 2, 1, "", "constructInput"], [73, 2, 1, "", "solve"]], "pyCBD.loopsolvers.sympysolver": [[74, 1, 1, "", "SympySolver"], [74, 4, 1, "", "reduce"]], "pyCBD.loopsolvers.sympysolver.SympySolver": [[74, 2, 1, "", "checkValidity"], [74, 2, 1, "", "constructInput"], [74, 2, 1, "", "getComponentCache"], [74, 2, 1, "", "solve"]], "pyCBD.preprocessing": [[77, 0, 0, "-", "butcher"], [78, 0, 0, "-", "rungekutta"]], "pyCBD.preprocessing.butcher": [[77, 1, 1, "", "ButcherTableau"]], "pyCBD.preprocessing.butcher.ButcherTableau": [[77, 2, 1, "", "BogackiShampine"], [77, 2, 1, "", "CashKarp"], [77, 2, 1, "", "DOPRI"], [77, 2, 1, "", "DormandPrince"], [77, 2, 1, "", "Euler"], [77, 2, 1, "", "Heun"], [77, 2, 1, "", "HeunEuler"], [77, 2, 1, "", "Midpoint"], [77, 2, 1, "", "MidpointEuler"], [77, 2, 1, "", "RK4"], [77, 2, 1, "", "RK4Alt"], [77, 2, 1, "", "RKCK"], [77, 2, 1, "", "RKDP"], [77, 2, 1, "", "RKF45"], [77, 2, 1, "", "Ralston"], [77, 2, 1, "", "RalstonEuler"], [77, 2, 1, "", "addRow"], [77, 2, 1, "", "addWeights"], [77, 2, 1, "", "getA"], [77, 2, 1, "", "getNodes"], [77, 2, 1, "", "getOrder"], [77, 2, 1, "", "getWeights"]], "pyCBD.preprocessing.rungekutta": [[78, 1, 1, "", "RKPreprocessor"]], "pyCBD.preprocessing.rungekutta.RKPreprocessor": [[78, 2, 1, "", "collect"], [78, 2, 1, "", "create_Error"], [78, 2, 1, "", "create_IVP"], [78, 2, 1, "", "create_K"], [78, 2, 1, "", "create_RK"], [78, 2, 1, "", "preprocess"]], "pyCBD.realtime": [[80, 0, 0, "-", "accurate_time"], [81, 0, 0, "-", "plotting"], [82, 0, 0, "-", "threadingBackend"], [83, 0, 0, "-", "threadingGameLoop"], [84, 0, 0, "-", "threadingGameLoopAlt"], [85, 0, 0, "-", "threadingPython"], [86, 0, 0, "-", "threadingTkInter"]], "pyCBD.realtime.accurate_time": [[80, 4, 1, "", "sleep"], [80, 4, 1, "", "time"]], "pyCBD.realtime.plotting": [[81, 1, 1, "", "Arrow"], [81, 1, 1, "", "Backend"], [81, 1, 1, "", "LinePlot"], [81, 1, 1, "", "PlotHandler"], [81, 1, 1, "", "PlotKind"], [81, 1, 1, "", "PlotManager"], [81, 1, 1, "", "ScatterPlot"], [81, 1, 1, "", "StepPlot"], [81, 4, 1, "", "follow"], [81, 4, 1, "", "plot"]], "pyCBD.realtime.plotting.Arrow": [[81, 2, 1, "", "create"], [81, 2, 1, "", "update"]], "pyCBD.realtime.plotting.Backend": [[81, 3, 1, "", "BOKEH"], [81, 3, 1, "", "MATPLOTLIB"], [81, 3, 1, "", "MPL"], [81, 3, 1, "", "SEABORN"], [81, 3, 1, "", "SNS"], [81, 2, 1, "", "compare"], [81, 2, 1, "", "exists"], [81, 2, 1, "", "get"]], "pyCBD.realtime.plotting.LinePlot": [[81, 2, 1, "", "create"], [81, 2, 1, "", "update"]], "pyCBD.realtime.plotting.PlotHandler": [[81, 2, 1, "", "close_event"], [81, 2, 1, "", "connect"], [81, 2, 1, "", "get_animation"], [81, 2, 1, "", "get_data"], [81, 2, 1, "", "hide"], [81, 2, 1, "", "is_opened"], [81, 2, 1, "", "set_data_getter"], [81, 2, 1, "", "set_kind_args"], [81, 2, 1, "", "show"], [81, 2, 1, "", "signal"], [81, 2, 1, "", "stop"], [81, 2, 1, "", "terminate"], [81, 2, 1, "", "toggle"], [81, 2, 1, "", "update"]], "pyCBD.realtime.plotting.PlotKind": [[81, 2, 1, "", "create"], [81, 2, 1, "", "is_backend"], [81, 2, 1, "", "update"]], "pyCBD.realtime.plotting.PlotManager": [[81, 2, 1, "", "all_opened"], [81, 2, 1, "", "connect"], [81, 2, 1, "", "get"], [81, 2, 1, "", "is_opened"], [81, 2, 1, "", "register"], [81, 2, 1, "", "set_xlim"], [81, 2, 1, "", "set_ylim"], [81, 2, 1, "", "stop"], [81, 2, 1, "", "terminate"], [81, 2, 1, "", "unregister"]], "pyCBD.realtime.plotting.ScatterPlot": [[81, 2, 1, "", "create"], [81, 2, 1, "", "update"]], "pyCBD.realtime.plotting.StepPlot": [[81, 2, 1, "", "create"], [81, 2, 1, "", "update"]], "pyCBD.realtime.threadingBackend": [[82, 1, 1, "", "Platform"], [82, 1, 1, "", "ThreadingBackend"]], "pyCBD.realtime.threadingBackend.Platform": [[82, 3, 1, "", "GAMELOOP"], [82, 3, 1, "", "GLA"], [82, 3, 1, "", "LOOP"], [82, 3, 1, "", "PYTHON"], [82, 3, 1, "", "THREADING"], [82, 3, 1, "", "TK"], [82, 3, 1, "", "TKINTER"]], "pyCBD.realtime.threadingBackend.ThreadingBackend": [[82, 2, 1, "", "is_alive"], [82, 2, 1, "", "run_on_new_thread"], [82, 2, 1, "", "step"], [82, 2, 1, "", "wait"]], "pyCBD.realtime.threadingGameLoop": [[83, 1, 1, "", "ThreadingGameLoop"]], "pyCBD.realtime.threadingGameLoop.ThreadingGameLoop": [[83, 2, 1, "", "step"], [83, 2, 1, "", "wait"]], "pyCBD.realtime.threadingGameLoopAlt": [[84, 1, 1, "", "ThreadingGameLoopAlt"]], "pyCBD.realtime.threadingGameLoopAlt.ThreadingGameLoopAlt": [[84, 2, 1, "", "step"], [84, 2, 1, "", "wait"]], "pyCBD.realtime.threadingPython": [[85, 1, 1, "", "ThreadingPython"]], "pyCBD.realtime.threadingPython.ThreadingPython": [[85, 2, 1, "", "run"], [85, 2, 1, "", "wait"]], "pyCBD.realtime.threadingTkInter": [[86, 1, 1, "", "ThreadingTkInter"]], "pyCBD.realtime.threadingTkInter.ThreadingTkInter": [[86, 2, 1, "", "wait"]], "pyCBD.scheduling": [[87, 1, 1, "", "Scheduler"], [87, 1, 1, "", "TopologicalScheduler"]], "pyCBD.scheduling.Scheduler": [[87, 2, 1, "", "mustCompute"], [87, 2, 1, "", "obtain"], [87, 2, 1, "", "schedule"], [87, 2, 1, "", "setRate"]], "pyCBD.scheduling.TopologicalScheduler": [[87, 2, 1, "", "dfsCollect"], [87, 2, 1, "", "dfsSort"], [87, 2, 1, "", "schedule"], [87, 2, 1, "", "topoSort"]], "pyCBD.simulator": [[88, 1, 1, "", "Simulator"]], "pyCBD.simulator.Simulator": [[88, 2, 1, "", "connect"], [88, 2, 1, "", "getClock"], [88, 2, 1, "", "getDeltaT"], [88, 2, 1, "", "getRelativeTime"], [88, 2, 1, "", "getTime"], [88, 2, 1, "", "is_running"], [88, 2, 1, "", "realtime_gameloop_call"], [88, 2, 1, "", "registerStateEvent"], [88, 2, 1, "", "run"], [88, 2, 1, "", "setAlgebraicLoopSolver"], [88, 2, 1, "", "setBlockRate"], [88, 2, 1, "", "setCommunicationInterval"], [88, 2, 1, "", "setCustomTracer"], [88, 2, 1, "", "setDeltaT"], [88, 2, 1, "", "setProgressBar"], [88, 2, 1, "", "setRealTime"], [88, 2, 1, "", "setRealTimePlatform"], [88, 2, 1, "", "setRealTimePlatformGameLoop"], [88, 2, 1, "", "setRealTimePlatformThreading"], [88, 2, 1, "", "setRealTimePlatformTk"], [88, 2, 1, "", "setScheduler"], [88, 2, 1, "", "setStateEventLocator"], [88, 2, 1, "", "setTerminationCondition"], [88, 2, 1, "", "setTerminationTime"], [88, 2, 1, "", "setVerbose"], [88, 2, 1, "", "signal"], [88, 2, 1, "", "stop"]], "pyCBD.state_events": [[89, 1, 1, "", "Direction"], [89, 1, 1, "", "StateEvent"], [90, 0, 0, "-", "locators"]], "pyCBD.state_events.Direction": [[89, 3, 1, "", "ANY"], [89, 3, 1, "", "FROM_ABOVE"], [89, 3, 1, "", "FROM_BELOW"]], "pyCBD.state_events.locators": [[90, 1, 1, "", "BisectionStateEventLocator"], [90, 1, 1, "", "ITPStateEventLocator"], [90, 1, 1, "", "LinearStateEventLocator"], [90, 1, 1, "", "PostCrossingStateEventLocator"], [90, 1, 1, "", "PreCrossingStateEventLocator"], [90, 1, 1, "", "RegulaFalsiStateEventLocator"]], "pyCBD.state_events.locators.BisectionStateEventLocator": [[90, 2, 1, "", "algorithm"]], "pyCBD.state_events.locators.ITPStateEventLocator": [[90, 2, 1, "", "algorithm"]], "pyCBD.state_events.locators.LinearStateEventLocator": [[90, 2, 1, "", "algorithm"]], "pyCBD.state_events.locators.PostCrossingStateEventLocator": [[90, 2, 1, "", "algorithm"]], "pyCBD.state_events.locators.PreCrossingStateEventLocator": [[90, 2, 1, "", "algorithm"]], "pyCBD.state_events.locators.RegulaFalsiStateEventLocator": [[90, 2, 1, "", "algorithm"]], "pyCBD.tracers": [[91, 1, 1, "", "Tracers"], [92, 0, 0, "-", "baseTracer"], [93, 0, 0, "-", "color"], [94, 0, 0, "-", "tracerVerbose"]], "pyCBD.tracers.Tracers": [[91, 2, 1, "", "deregisterTracer"], [91, 2, 1, "", "getById"], [91, 2, 1, "", "hasTracers"], [91, 2, 1, "", "registerTracer"], [91, 2, 1, "", "startTracers"], [91, 2, 1, "", "stopTracers"], [91, 2, 1, "", "thread_loop"], [91, 2, 1, "", "trace"], [91, 2, 1, "", "traceCompute"], [91, 2, 1, "", "traceEndNewIteration"], [91, 2, 1, "", "traceEndSimulation"], [91, 2, 1, "", "traceStartNewIteration"]], "pyCBD.tracers.baseTracer": [[92, 1, 1, "", "BaseTracer"]], "pyCBD.tracers.baseTracer.BaseTracer": [[92, 2, 1, "", "closeFile"], [92, 2, 1, "", "getInterpolator"], [92, 2, 1, "", "openFile"], [92, 2, 1, "", "setInterpolator"], [92, 2, 1, "", "setModelName"], [92, 2, 1, "", "startTracer"], [92, 2, 1, "", "stopTracer"], [92, 2, 1, "", "timeInfo"], [92, 2, 1, "", "trace"], [92, 2, 1, "", "traceCompute"], [92, 2, 1, "", "traceEndIteration"], [92, 2, 1, "", "traceEndSimulation"], [92, 2, 1, "", "traceStartNewIteration"], [92, 2, 1, "", "traceln"]], "pyCBD.tracers.color": [[93, 1, 1, "", "COLOR"]], "pyCBD.tracers.color.COLOR": [[93, 3, 1, "", "BBLUE"], [93, 3, 1, "", "BCYAN"], [93, 3, 1, "", "BDARKGRAY"], [93, 3, 1, "", "BGREEN"], [93, 3, 1, "", "BLBLUE"], [93, 3, 1, "", "BLCYAN"], [93, 3, 1, "", "BLDARKGRAY"], [93, 3, 1, "", "BLGREEN"], [93, 3, 1, "", "BLIGHTGRAY"], [93, 3, 1, "", "BLINK"], [93, 3, 1, "", "BLLIGHTGRAY"], [93, 3, 1, "", "BLPURPLE"], [93, 3, 1, "", "BLRED"], [93, 3, 1, "", "BLUE"], [93, 3, 1, "", "BLYELLOW"], [93, 3, 1, "", "BOLD"], [93, 3, 1, "", "BPURPLE"], [93, 3, 1, "", "BRED"], [93, 3, 1, "", "BYELLOW"], [93, 3, 1, "", "CYAN"], [93, 3, 1, "", "DARK"], [93, 3, 1, "", "DARKGRAY"], [93, 3, 1, "", "ENDC"], [93, 3, 1, "", "GREEN"], [93, 3, 1, "", "HIGHLIGHT"], [93, 3, 1, "", "ITALIC"], [93, 3, 1, "", "LBLUE"], [93, 3, 1, "", "LCYAN"], [93, 3, 1, "", "LDARKGRAY"], [93, 3, 1, "", "LGREEN"], [93, 3, 1, "", "LIGHTGRAY"], [93, 3, 1, "", "LLIGHTGRAY"], [93, 3, 1, "", "LPURPLE"], [93, 3, 1, "", "LRED"], [93, 3, 1, "", "LYELLOW"], [93, 3, 1, "", "OLINE"], [93, 3, 1, "", "PURPLE"], [93, 3, 1, "", "RED"], [93, 3, 1, "", "STRIKE"], [93, 3, 1, "", "ULINE"], [93, 3, 1, "", "UULINE"], [93, 3, 1, "", "YELLOW"], [93, 2, 1, "", "colorize"], [93, 2, 1, "", "rainbow"], [93, 2, 1, "", "uncolorize"]], "pyCBD.tracers.tracerVerbose": [[94, 1, 1, "", "VerboseTracer"]], "pyCBD.tracers.tracerVerbose.VerboseTracer": [[94, 2, 1, "", "traceCompute"], [94, 2, 1, "", "traceStartNewIteration"]], "pyCBD.util": [[95, 5, 1, "", "PYCBD_VERSION"], [95, 5, 1, "", "PYTHON_VERSION"], [95, 4, 1, "", "enum"], [95, 4, 1, "", "hash64"], [95, 4, 1, "", "unhash64"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "property", "Python property"]}, "titleterms": {"cbd": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 53, 57, 58, 59, 60, 61, 65, 67, 96], "packag": [0, 22, 25, 37, 54, 76, 79, 91], "subpackag": [0, 54], "submodul": [0, 2, 7, 11, 22, 25, 35, 37, 54, 56, 61, 65, 76, 79, 89, 91], "core": [1, 55], "modul": [1, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 53, 55, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95], "convert": [2, 8, 9, 56, 62, 63], "gener": [3, 4, 5, 7, 45, 46, 47, 50, 57, 58, 59, 61], "c": [3, 57], "code": [3, 57], "from": [3, 4, 5, 7, 53, 57, 58, 59, 61], "graphviz": [4, 58], "model": [4, 5, 6, 7, 44, 48, 49, 58, 59, 60, 61], "equat": [5, 59], "encapsul": [6, 60], "pythonpdev": [6, 60], "latex": [7, 61], "latexifi": [8, 9, 62, 63], "cbd2latex": [8, 62], "function": [9, 63], "depgraph": [10, 64], "standard": [11, 65], "librari": [11, 65], "bbl": [11, 65], "lib": [12, 14, 15, 16, 53, 66, 68, 69, 70], "endpoint": [12, 66], "us": [13, 48, 67], "lego": [13, 67], "mindstorm": [13, 67], "ev3": [13, 67], "extra": [14, 68], "io": [15, 69], "std": [16, 53, 70], "loopsolv": [17, 18, 19, 20, 71, 72, 73, 74], "linearsolv": [18, 72], "solver": [19, 73], "sympysolv": [20, 74], "naivelog": [21, 75], "preprocess": [22, 23, 24, 76, 77, 78], "butcher": [23, 77], "rungekutta": [24, 78], "realtim": [25, 26, 27, 28, 29, 30, 31, 32, 49, 79, 80, 81, 82, 83, 84, 85, 86], "accurate_tim": [26, 80], "plot": [27, 48, 81], "threadingbackend": [28, 82], "threadinggameloop": [29, 83], "threadinggameloopalt": [30, 84], "threadingpython": [31, 85], "threadingtkint": [32, 86], "schedul": [33, 87], "simul": [34, 43, 48, 49, 51, 88, 96], "state_ev": [35, 36, 89, 90], "locat": [36, 90], "tracer": [37, 38, 39, 40, 91, 92, 93, 94], "basetrac": [38, 92], "color": [39, 93], "tracerverbos": [40, 94], "util": [41, 95], "changelog": 42, "continu": 43, "time": 43, "fix": 43, "step": 43, "size": 43, "manipul": 43, "clock": [43, 53], "adapt": 43, "tkinter": [44, 48, 49], "dashboard": 44, "edit": 44, "valu": 44, "exampl": [44, 48, 49, 51], "The": 44, "hierarch": 45, "even": 45, "number": 45, "flatten": 45, "fibonacci": 46, "sequenc": 46, "linear": [47, 53], "congruenti": 47, "termin": 47, "condit": 47, "live": 48, "data": 48, "dure": 48, "matplotlib": 48, "default": 48, "seaborn": 48, "jupyt": 48, "notebook": 48, "bokeh": 48, "configur": 48, "follow": 48, "signal": 48, "differ": 48, "kind": 48, "python": 49, "thread": 49, "backend": 49, "gameloop": 49, "sine": 50, "welcom": 51, "pycbd": [51, 52, 53, 54, 55, 56, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "": 51, "document": 51, "setup": 51, "simpl": 51, "advanc": 51, "intern": 51, "how": [52, 96], "instal": 52, "framework": 52, "depend": [52, 53], "standalon": 52, "common": 53, "issu": 53, "solut": 53, "assertionerror": 53, "can": 53, "onli": 53, "add": 53, "baseblock": 53, "subclass": 53, "instanc": 53, "notimplementederror": 53, "ha": 53, "noth": 53, "comput": 53, "valueerror": 53, "specifi": 53, "object": 53, "influenc": 53, "i": 53, "member": 53, "thi": 53, "graph": 53, "keyerror": 53, "x": 53, "cannot": 53, "solv": 53, "non": 53, "algebra": 53, "loop": 53, "warn": 53, "did": 53, "block": 53, "same": 53, "name": 53, "an": 53, "alreadi": 53, "exist": 53, "importerror": 53, "import": 53, "partial": 53, "initi": 53, "run": 96, "test": 96}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"CBD package": [[0, "cbd-package"]], "Subpackages": [[0, "subpackages"], [54, "subpackages"]], "Submodules": [[0, "submodules"], [2, "submodules"], [7, "submodules"], [11, "submodules"], [22, "submodules"], [25, "submodules"], [35, "submodules"], [37, "submodules"], [54, "submodules"], [56, "submodules"], [61, "submodules"], [65, "submodules"], [76, "submodules"], [79, "submodules"], [89, "submodules"], [91, "submodules"]], "CBD.Core module": [[1, "cbd-core-module"]], "CBD.converters": [[2, "cbd-converters"]], "Generate C code from CBDs": [[3, "generate-c-code-from-cbds"], [57, "generate-c-code-from-cbds"]], "Generate GraphViz from CBD Models": [[4, "generate-graphviz-from-cbd-models"], [58, "module-pyCBD.converters.CBDDraw"]], "Generate CBD Models from Equations": [[5, "generate-cbd-models-from-equations"], [59, "generate-cbd-models-from-equations"]], "Encapsulating CBD Models in PythonPDEVS": [[6, "encapsulating-cbd-models-in-pythonpdevs"], [60, "encapsulating-cbd-models-in-pythonpdevs"]], "Generate LaTeX from CBD Models": [[7, "generate-latex-from-cbd-models"], [61, "generate-latex-from-cbd-models"]], "CBD.converters.latexify.CBD2Latex module": [[8, "cbd-converters-latexify-cbd2latex-module"]], "CBD.converters.latexify.functions module": [[9, "cbd-converters-latexify-functions-module"]], "CBD.depGraph module": [[10, "cbd-depgraph-module"]], "Standard CBD Library (BBL)": [[11, "standard-cbd-library-bbl"], [65, "module-pyCBD.lib"]], "CBD.lib.endpoints module": [[12, "cbd-lib-endpoints-module"]], "Using CBDs with LEGO MINDSTORMS EV3": [[13, "using-cbds-with-lego-mindstorms-ev3"], [67, "using-cbds-with-lego-mindstorms-ev3"]], "CBD.lib.extra module": [[14, "cbd-lib-extra-module"]], "CBD.lib.io module": [[15, "cbd-lib-io-module"]], "CBD.lib.std module": [[16, "cbd-lib-std-module"]], "CBD.loopsolvers module": [[17, "cbd-loopsolvers-module"]], "CBD.loopsolvers.linearsolver module": [[18, "cbd-loopsolvers-linearsolver-module"]], "CBD.loopsolvers.solver module": [[19, "cbd-loopsolvers-solver-module"]], "CBD.loopsolvers.sympysolver module": [[20, "cbd-loopsolvers-sympysolver-module"]], "CBD.naivelog module": [[21, "cbd-naivelog-module"]], "CBD.preprocessing package": [[22, "cbd-preprocessing-package"]], "CBD.preprocessing.butcher module": [[23, "cbd-preprocessing-butcher-module"]], "CBD.preprocessing.rungekutta module": [[24, "cbd-preprocessing-rungekutta-module"]], "CBD.realtime package": [[25, "cbd-realtime-package"]], "CBD.realtime.accurate_time module": [[26, "cbd-realtime-accurate-time-module"]], "CBD.realtime.plotting module": [[27, "cbd-realtime-plotting-module"]], "CBD.realtime.threadingBackend module": [[28, "cbd-realtime-threadingbackend-module"]], "CBD.realtime.threadingGameLoop module": [[29, "cbd-realtime-threadinggameloop-module"]], "CBD.realtime.threadingGameLoopAlt module": [[30, "cbd-realtime-threadinggameloopalt-module"]], "CBD.realtime.threadingPython module": [[31, "cbd-realtime-threadingpython-module"]], "CBD.realtime.threadingTkInter module": [[32, "cbd-realtime-threadingtkinter-module"]], "CBD.scheduling module": [[33, "cbd-scheduling-module"]], "CBD.simulator module": [[34, "cbd-simulator-module"]], "CBD.state_events module": [[35, "cbd-state-events-module"]], "CBD.state_events.locators module": [[36, "cbd-state-events-locators-module"]], "CBD.tracers package": [[37, "cbd-tracers-package"]], "CBD.tracers.baseTracer module": [[38, "cbd-tracers-basetracer-module"]], "CBD.tracers.color module": [[39, "cbd-tracers-color-module"]], "CBD.tracers.tracerVerbose module": [[40, "cbd-tracers-tracerverbose-module"]], "CBD.util module": [[41, "cbd-util-module"]], "Changelog": [[42, "changelog"]], "Continuous Time Simulation": [[43, "continuous-time-simulation"]], "Fixed Step Size": [[43, "fixed-step-size"]], "Manipulating the Clock": [[43, "manipulating-the-clock"]], "Adaptive Step Size": [[43, "adaptive-step-size"]], "TkInter Dashboard with Editable Values": [[44, "tkinter-dashboard-with-editable-values"]], "Example Model": [[44, "example-model"], [48, "example-model"], [49, "example-model"]], "The Dashboard": [[44, "the-dashboard"]], "Hierarchical Even Number Generator": [[45, "hierarchical-even-number-generator"]], "Flattening": [[45, "flattening"]], "Fibonacci Sequence Generator": [[46, "fibonacci-sequence-generator"]], "Linear Congruential Generator": [[47, "linear-congruential-generator"]], "Termination Condition": [[47, "termination-condition"]], "Live Plotting of Data During the Simulation": [[48, "live-plotting-of-data-during-the-simulation"]], "Using MatPlotLib": [[48, "using-matplotlib"]], "Default": [[48, "default"]], "Seaborn": [[48, "seaborn"]], "Jupyter Notebook": [[48, "jupyter-notebook"]], "TkInter": [[48, "tkinter"]], "Using Bokeh": [[48, "using-bokeh"]], "Configuration": [[48, "configuration"]], "Following the Signal": [[48, "following-the-signal"]], "Different Kinds of Plots": [[48, "different-kinds-of-plots"]], "Realtime Simulation": [[49, "realtime-simulation"]], "Python Threading Backend": [[49, "python-threading-backend"]], "TkInter Backend": [[49, "tkinter-backend"]], "GameLoop Backend": [[49, "gameloop-backend"]], "Sine Generator": [[50, "sine-generator"]], "Welcome to the pyCBD Simulator\u2019s Documentation!": [[51, "welcome-to-the-pycbd-simulator-s-documentation"]], "Setup": [[51, null]], "Simple Examples": [[51, null]], "Advanced Examples": [[51, null]], "Internal Documentation": [[51, null]], "How to install the pyCBD framework?": [[52, "how-to-install-the-pycbd-framework"]], "Dependencies": [[52, "dependencies"]], "Installation": [[52, "installation"]], "Standalone": [[52, "standalone"]], "Common Issues and Solutions": [[53, "common-issues-and-solutions"]], "AssertionError: Can only add BaseBlock (subclass) instances to a CBD": [[53, "assertionerror-can-only-add-baseblock-subclass-instances-to-a-cbd"]], "NotImplementedError: BaseBlock has nothing to compute": [[53, "notimplementederror-baseblock-has-nothing-to-compute"]], "ValueError: Specified object/influencer/dependent is not member of this graph": [[53, "valueerror-specified-object-influencer-dependent-is-not-member-of-this-graph"]], "KeyError: \u2018X\u2019": [[53, "keyerror-x"]], "Cannot solve non-linear algebraic loop.": [[53, "cannot-solve-non-linear-algebraic-loop"]], "Warning: did not add this block as it has the same name X as an already existing block": [[53, "warning-did-not-add-this-block-as-it-has-the-same-name-x-as-an-already-existing-block"]], "ImportError: cannot import name \u2018Clock\u2019 from partially initialized module \u2018pyCBD.lib.std\u2019": [[53, "importerror-cannot-import-name-clock-from-partially-initialized-module-pycbd-lib-std"]], "pyCBD package": [[54, "module-pyCBD"]], "pyCBD.Core module": [[55, "module-pyCBD.Core"]], "pyCBD.converters": [[56, "module-pyCBD.converters"]], "pyCBD.converters.latexify.CBD2Latex module": [[62, "module-pyCBD.converters.latexify.CBD2Latex"]], "pyCBD.converters.latexify.functions module": [[63, "module-pyCBD.converters.latexify.functions"]], "pyCBD.depGraph module": [[64, "module-pyCBD.depGraph"]], "pyCBD.lib.endpoints module": [[66, "module-pyCBD.lib.endpoints"]], "pyCBD.lib.extra module": [[68, "module-pyCBD.lib.extra"]], "pyCBD.lib.io module": [[69, "module-pyCBD.lib.io"]], "pyCBD.lib.std module": [[70, "module-pyCBD.lib.std"]], "pyCBD.loopsolvers module": [[71, "module-pyCBD.loopsolvers"]], "pyCBD.loopsolvers.linearsolver module": [[72, "module-pyCBD.loopsolvers.linearsolver"]], "pyCBD.loopsolvers.solver module": [[73, "module-pyCBD.loopsolvers.solver"]], "pyCBD.loopsolvers.sympysolver module": [[74, "module-pyCBD.loopsolvers.sympysolver"]], "pyCBD.naivelog module": [[75, "module-pyCBD.naivelog"]], "pyCBD.preprocessing package": [[76, "module-pyCBD.preprocessing"]], "pyCBD.preprocessing.butcher module": [[77, "module-pyCBD.preprocessing.butcher"]], "pyCBD.preprocessing.rungekutta module": [[78, "module-pyCBD.preprocessing.rungekutta"]], "pyCBD.realtime package": [[79, "module-pyCBD.realtime"]], "pyCBD.realtime.accurate_time module": [[80, "module-pyCBD.realtime.accurate_time"]], "pyCBD.realtime.plotting module": [[81, "module-pyCBD.realtime.plotting"]], "pyCBD.realtime.threadingBackend module": [[82, "module-pyCBD.realtime.threadingBackend"]], "pyCBD.realtime.threadingGameLoop module": [[83, "module-pyCBD.realtime.threadingGameLoop"]], "pyCBD.realtime.threadingGameLoopAlt module": [[84, "module-pyCBD.realtime.threadingGameLoopAlt"]], "pyCBD.realtime.threadingPython module": [[85, "module-pyCBD.realtime.threadingPython"]], "pyCBD.realtime.threadingTkInter module": [[86, "module-pyCBD.realtime.threadingTkInter"]], "pyCBD.scheduling module": [[87, "module-pyCBD.scheduling"]], "pyCBD.simulator module": [[88, "module-pyCBD.simulator"]], "pyCBD.state_events module": [[89, "module-pyCBD.state_events"]], "pyCBD.state_events.locators module": [[90, "module-pyCBD.state_events.locators"]], "pyCBD.tracers package": [[91, "module-pyCBD.tracers"]], "pyCBD.tracers.baseTracer module": [[92, "module-pyCBD.tracers.baseTracer"]], "pyCBD.tracers.color module": [[93, "module-pyCBD.tracers.color"]], "pyCBD.tracers.tracerVerbose module": [[94, "module-pyCBD.tracers.tracerVerbose"]], "pyCBD.util module": [[95, "module-pyCBD.util"]], "How to run a CBD simulation?": [[96, "how-to-run-a-cbd-simulation"]], "Running the Tests": [[96, "running-the-tests"]]}, "indexentries": {"arrow (cbd.realtime.plotting.arrow)": [[48, "term-Arrow-CBD.realtime.plotting.Arrow"]], "line plot (cbd.realtime.plotting.lineplot)": [[48, "term-Line-Plot-CBD.realtime.plotting.LinePlot"]], "scatter plot (cbd.realtime.plotting.scatterplot)": [[48, "term-Scatter-Plot-CBD.realtime.plotting.ScatterPlot"]], "step plot (cbd.realtime.plotting.stepplot)": [[48, "term-Step-Plot-CBD.realtime.plotting.StepPlot"]], "module": [[54, "module-pyCBD"], [55, "module-pyCBD.Core"], [56, "module-pyCBD.converters"], [58, "module-pyCBD.converters.CBDDraw"], [62, "module-pyCBD.converters.latexify.CBD2Latex"], [63, "module-pyCBD.converters.latexify.functions"], [64, "module-pyCBD.depGraph"], [65, "module-pyCBD.lib"], [66, "module-pyCBD.lib.endpoints"], [68, "module-pyCBD.lib.extra"], [69, "module-pyCBD.lib.io"], [70, "module-pyCBD.lib.std"], [71, "module-pyCBD.loopsolvers"], [72, "module-pyCBD.loopsolvers.linearsolver"], [73, "module-pyCBD.loopsolvers.solver"], [74, "module-pyCBD.loopsolvers.sympysolver"], [75, "module-pyCBD.naivelog"], [76, "module-pyCBD.preprocessing"], [77, "module-pyCBD.preprocessing.butcher"], [78, "module-pyCBD.preprocessing.rungekutta"], [79, "module-pyCBD.realtime"], [80, "module-pyCBD.realtime.accurate_time"], [81, "module-pyCBD.realtime.plotting"], [82, "module-pyCBD.realtime.threadingBackend"], [83, "module-pyCBD.realtime.threadingGameLoop"], [84, "module-pyCBD.realtime.threadingGameLoopAlt"], [85, "module-pyCBD.realtime.threadingPython"], [86, "module-pyCBD.realtime.threadingTkInter"], [87, "module-pyCBD.scheduling"], [88, "module-pyCBD.simulator"], [89, "module-pyCBD.state_events"], [90, "module-pyCBD.state_events.locators"], [91, "module-pyCBD.tracers"], [92, "module-pyCBD.tracers.baseTracer"], [93, "module-pyCBD.tracers.color"], [94, "module-pyCBD.tracers.tracerVerbose"], [95, "module-pyCBD.util"]], "pycbd": [[54, "module-pyCBD"]], "baseblock (class in pycbd.core)": [[55, "pyCBD.Core.BaseBlock"]], "cbd (class in pycbd.core)": [[55, "pyCBD.Core.CBD"]], "connector (class in pycbd.core)": [[55, "pyCBD.Core.Connector"]], "direction (pycbd.core.port attribute)": [[55, "pyCBD.Core.Port.Direction"]], "inputlink (class in pycbd.core)": [[55, "pyCBD.Core.InputLink"]], "port (class in pycbd.core)": [[55, "pyCBD.Core.Port"]], "signal (class in pycbd.core)": [[55, "pyCBD.Core.Signal"]], "addblock() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.addBlock"]], "addconnection() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.addConnection"]], "addfixedrateclock() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.addFixedRateClock"]], "addinputport() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.addInputPort"]], "addoutputport() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.addOutputPort"]], "appendtosignal() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.appendToSignal"]], "block (pycbd.core.inputlink attribute)": [[55, "pyCBD.Core.InputLink.block"]], "clear() (pycbd.core.port method)": [[55, "pyCBD.Core.Port.clear"]], "clearblocks() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.clearBlocks"]], "clearports() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.clearPorts"]], "clearsignals() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.clearSignals"]], "clone() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.clone"]], "clone() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.clone"]], "compute() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.compute"]], "compute() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.compute"]], "connect() (pycbd.core.port static method)": [[55, "pyCBD.Core.Port.connect"]], "count() (pycbd.core.port method)": [[55, "pyCBD.Core.Port.count"]], "defaultinputportnameidentifier() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.defaultInputPortNameIdentifier"]], "disconnect() (pycbd.core.port static method)": [[55, "pyCBD.Core.Port.disconnect"]], "dump() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.dump"]], "dumpsignals() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.dumpSignals"]], "find() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.find"]], "flatten() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.flatten"]], "flattened() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.flattened"]], "get() (pycbd.core.port method)": [[55, "pyCBD.Core.Port.get"]], "getallsignalnames() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.getAllSignalNames"]], "getblockbyname() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.getBlockByName"]], "getblockname() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getBlockName"]], "getblocktype() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getBlockType"]], "getblocks() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.getBlocks"]], "getclock() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getClock"]], "getclock() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.getClock"]], "getdependencies() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getDependencies"]], "getdependencies() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.getDependencies"]], "getdependencies() (pycbd.core.port method)": [[55, "pyCBD.Core.Port.getDependencies"]], "getfunctionname() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getFunctionName"]], "gethistory() (pycbd.core.port method)": [[55, "pyCBD.Core.Port.getHistory"]], "getincoming() (pycbd.core.port method)": [[55, "pyCBD.Core.Port.getIncoming"]], "getinputportbyname() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getInputPortByName"]], "getinputportnames() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getInputPortNames"]], "getinputports() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getInputPorts"]], "getinputsignal() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getInputSignal"]], "getnextportclosure() (pycbd.core.port method)": [[55, "pyCBD.Core.Port.getNextPortClosure"]], "getoutgoing() (pycbd.core.port method)": [[55, "pyCBD.Core.Port.getOutgoing"]], "getoutputportbyname() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getOutputPortByName"]], "getoutputportnames() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getOutputPortNames"]], "getoutputports() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getOutputPorts"]], "getpath() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getPath"]], "getpath() (pycbd.core.port method)": [[55, "pyCBD.Core.Port.getPath"]], "getportconnectedtoinput() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getPortConnectedToInput"]], "getpreviousportclosure() (pycbd.core.port method)": [[55, "pyCBD.Core.Port.getPreviousPortClosure"]], "getsignalhistory() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.getSignalHistory"]], "getsignalhistory() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.getSignalHistory"]], "getsignals() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.getSignals"]], "gettopcbd() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.getTopCBD"]], "getuniqueblockname() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.getUniqueBlockName"]], "hasblock() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.hasBlock"]], "hasinputportwithname() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.hasInputPortWithName"]], "hasoutputportwithname() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.hasOutputPortWithName"]], "info() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.info"]], "info() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.info"]], "linktoinput() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.linkToInput"]], "output_port (pycbd.core.inputlink attribute)": [[55, "pyCBD.Core.InputLink.output_port"]], "pycbd.core": [[55, "module-pyCBD.Core"]], "removeblock() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.removeBlock"]], "removeconnection() (pycbd.core.cbd method)": [[55, "pyCBD.Core.CBD.removeConnection"]], "removeinputport() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.removeInputPort"]], "reparentports() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.reparentPorts"]], "reset() (pycbd.core.port method)": [[55, "pyCBD.Core.Port.reset"]], "resetports() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.resetPorts"]], "set() (pycbd.core.port method)": [[55, "pyCBD.Core.Port.set"]], "setblockname() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.setBlockName"]], "setparent() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.setParent"]], "time (pycbd.core.signal attribute)": [[55, "pyCBD.Core.Signal.time"]], "transfer() (pycbd.core.connector method)": [[55, "pyCBD.Core.Connector.transfer"]], "unlinkinput() (pycbd.core.baseblock method)": [[55, "pyCBD.Core.BaseBlock.unlinkInput"]], "value (pycbd.core.signal attribute)": [[55, "pyCBD.Core.Signal.value"]], "pycbd.converters": [[56, "module-pyCBD.converters"]], "gvdraw() (in module pycbd.converters.cbddraw)": [[58, "pyCBD.converters.CBDDraw.gvDraw"]], "pycbd.converters.cbddraw": [[58, "module-pyCBD.converters.CBDDraw"]], "cbd2latex (class in pycbd.converters.latexify.cbd2latex)": [[62, "pyCBD.converters.latexify.CBD2Latex.CBD2Latex"]], "default_config (pycbd.converters.latexify.cbd2latex.cbd2latex attribute)": [[62, "pyCBD.converters.latexify.CBD2Latex.CBD2Latex.DEFAULT_CONFIG"]], "eq() (pycbd.converters.latexify.cbd2latex.cbd2latex method)": [[62, "pyCBD.converters.latexify.CBD2Latex.CBD2Latex.eq"]], "get_block_equation() (pycbd.converters.latexify.cbd2latex.cbd2latex method)": [[62, "pyCBD.converters.latexify.CBD2Latex.CBD2Latex.get_block_equation"]], "latex() (pycbd.converters.latexify.cbd2latex.cbd2latex method)": [[62, "pyCBD.converters.latexify.CBD2Latex.CBD2Latex.latex"]], "pycbd.converters.latexify.cbd2latex": [[62, "module-pyCBD.converters.latexify.CBD2Latex"]], "rename() (pycbd.converters.latexify.cbd2latex.cbd2latex static method)": [[62, "pyCBD.converters.latexify.CBD2Latex.CBD2Latex.rename"]], "render() (pycbd.converters.latexify.cbd2latex.cbd2latex method)": [[62, "pyCBD.converters.latexify.CBD2Latex.CBD2Latex.render"]], "simplify() (pycbd.converters.latexify.cbd2latex.cbd2latex method)": [[62, "pyCBD.converters.latexify.CBD2Latex.CBD2Latex.simplify"]], "simplify_links() (pycbd.converters.latexify.cbd2latex.cbd2latex method)": [[62, "pyCBD.converters.latexify.CBD2Latex.CBD2Latex.simplify_links"]], "substitute() (pycbd.converters.latexify.cbd2latex.cbd2latex method)": [[62, "pyCBD.converters.latexify.CBD2Latex.CBD2Latex.substitute"]], "block_map (in module pycbd.converters.latexify.functions)": [[63, "pyCBD.converters.latexify.functions.BLOCK_MAP"]], "binaryfnc (class in pycbd.converters.latexify.functions)": [[63, "pyCBD.converters.latexify.functions.BinaryFnc"]], "constantfnc (class in pycbd.converters.latexify.functions)": [[63, "pyCBD.converters.latexify.functions.ConstantFnc"]], "delayfnc (class in pycbd.converters.latexify.functions)": [[63, "pyCBD.converters.latexify.functions.DelayFnc"]], "derivatorfnc (class in pycbd.converters.latexify.functions)": [[63, "pyCBD.converters.latexify.functions.DerivatorFnc"]], "eq (class in pycbd.converters.latexify.functions)": [[63, "pyCBD.converters.latexify.functions.Eq"]], "fnc (class in pycbd.converters.latexify.functions)": [[63, "pyCBD.converters.latexify.functions.Fnc"]], "integratorfnc (class in pycbd.converters.latexify.functions)": [[63, "pyCBD.converters.latexify.functions.IntegratorFnc"]], "multifnc (class in pycbd.converters.latexify.functions)": [[63, "pyCBD.converters.latexify.functions.MultiFnc"]], "time (class in pycbd.converters.latexify.functions)": [[63, "pyCBD.converters.latexify.functions.Time"]], "unaryfnc (class in pycbd.converters.latexify.functions)": [[63, "pyCBD.converters.latexify.functions.UnaryFnc"]], "varfnc (class in pycbd.converters.latexify.functions)": [[63, "pyCBD.converters.latexify.functions.VarFnc"]], "apply() (pycbd.converters.latexify.functions.eq method)": [[63, "pyCBD.converters.latexify.functions.Eq.apply"]], "apply() (pycbd.converters.latexify.functions.fnc method)": [[63, "pyCBD.converters.latexify.functions.Fnc.apply"]], "apply() (pycbd.converters.latexify.functions.varfnc method)": [[63, "pyCBD.converters.latexify.functions.VarFnc.apply"]], "at() (pycbd.converters.latexify.functions.constantfnc method)": [[63, "pyCBD.converters.latexify.functions.ConstantFnc.at"]], "at() (pycbd.converters.latexify.functions.delayfnc method)": [[63, "pyCBD.converters.latexify.functions.DelayFnc.at"]], "at() (pycbd.converters.latexify.functions.derivatorfnc method)": [[63, "pyCBD.converters.latexify.functions.DerivatorFnc.at"]], "at() (pycbd.converters.latexify.functions.eq method)": [[63, "pyCBD.converters.latexify.functions.Eq.at"]], "at() (pycbd.converters.latexify.functions.fnc method)": [[63, "pyCBD.converters.latexify.functions.Fnc.at"]], "at() (pycbd.converters.latexify.functions.integratorfnc method)": [[63, "pyCBD.converters.latexify.functions.IntegratorFnc.at"]], "at() (pycbd.converters.latexify.functions.varfnc method)": [[63, "pyCBD.converters.latexify.functions.VarFnc.at"]], "contains() (pycbd.converters.latexify.functions.fnc method)": [[63, "pyCBD.converters.latexify.functions.Fnc.contains"]], "contains() (pycbd.converters.latexify.functions.varfnc method)": [[63, "pyCBD.converters.latexify.functions.VarFnc.contains"]], "create() (pycbd.converters.latexify.functions.binaryfnc method)": [[63, "pyCBD.converters.latexify.functions.BinaryFnc.create"]], "create() (pycbd.converters.latexify.functions.constantfnc method)": [[63, "pyCBD.converters.latexify.functions.ConstantFnc.create"]], "create() (pycbd.converters.latexify.functions.fnc method)": [[63, "pyCBD.converters.latexify.functions.Fnc.create"]], "create() (pycbd.converters.latexify.functions.multifnc method)": [[63, "pyCBD.converters.latexify.functions.MultiFnc.create"]], "create() (pycbd.converters.latexify.functions.unaryfnc method)": [[63, "pyCBD.converters.latexify.functions.UnaryFnc.create"]], "eq() (pycbd.converters.latexify.functions.binaryfnc method)": [[63, "pyCBD.converters.latexify.functions.BinaryFnc.eq"]], "eq() (pycbd.converters.latexify.functions.constantfnc method)": [[63, "pyCBD.converters.latexify.functions.ConstantFnc.eq"]], "eq() (pycbd.converters.latexify.functions.derivatorfnc method)": [[63, "pyCBD.converters.latexify.functions.DerivatorFnc.eq"]], "eq() (pycbd.converters.latexify.functions.eq method)": [[63, "pyCBD.converters.latexify.functions.Eq.eq"]], "eq() (pycbd.converters.latexify.functions.fnc method)": [[63, "pyCBD.converters.latexify.functions.Fnc.eq"]], "eq() (pycbd.converters.latexify.functions.integratorfnc method)": [[63, "pyCBD.converters.latexify.functions.IntegratorFnc.eq"]], "eq() (pycbd.converters.latexify.functions.multifnc method)": [[63, "pyCBD.converters.latexify.functions.MultiFnc.eq"]], "eq() (pycbd.converters.latexify.functions.unaryfnc method)": [[63, "pyCBD.converters.latexify.functions.UnaryFnc.eq"]], "eq() (pycbd.converters.latexify.functions.varfnc method)": [[63, "pyCBD.converters.latexify.functions.VarFnc.eq"]], "get_dependencies() (pycbd.converters.latexify.functions.eq method)": [[63, "pyCBD.converters.latexify.functions.Eq.get_dependencies"]], "get_dependencies() (pycbd.converters.latexify.functions.fnc method)": [[63, "pyCBD.converters.latexify.functions.Fnc.get_dependencies"]], "is_absolute() (pycbd.converters.latexify.functions.time method)": [[63, "pyCBD.converters.latexify.functions.Time.is_absolute"]], "is_relative() (pycbd.converters.latexify.functions.time method)": [[63, "pyCBD.converters.latexify.functions.Time.is_relative"]], "latex() (pycbd.converters.latexify.functions.binaryfnc method)": [[63, "pyCBD.converters.latexify.functions.BinaryFnc.latex"]], "latex() (pycbd.converters.latexify.functions.constantfnc method)": [[63, "pyCBD.converters.latexify.functions.ConstantFnc.latex"]], "latex() (pycbd.converters.latexify.functions.derivatorfnc method)": [[63, "pyCBD.converters.latexify.functions.DerivatorFnc.latex"]], "latex() (pycbd.converters.latexify.functions.eq method)": [[63, "pyCBD.converters.latexify.functions.Eq.latex"]], "latex() (pycbd.converters.latexify.functions.fnc method)": [[63, "pyCBD.converters.latexify.functions.Fnc.latex"]], "latex() (pycbd.converters.latexify.functions.integratorfnc method)": [[63, "pyCBD.converters.latexify.functions.IntegratorFnc.latex"]], "latex() (pycbd.converters.latexify.functions.multifnc method)": [[63, "pyCBD.converters.latexify.functions.MultiFnc.latex"]], "latex() (pycbd.converters.latexify.functions.unaryfnc method)": [[63, "pyCBD.converters.latexify.functions.UnaryFnc.latex"]], "latex() (pycbd.converters.latexify.functions.varfnc method)": [[63, "pyCBD.converters.latexify.functions.VarFnc.latex"]], "now() (pycbd.converters.latexify.functions.time static method)": [[63, "pyCBD.converters.latexify.functions.Time.now"]], "pycbd.converters.latexify.functions": [[63, "module-pyCBD.converters.latexify.functions"]], "simplify() (pycbd.converters.latexify.functions.binaryfnc method)": [[63, "pyCBD.converters.latexify.functions.BinaryFnc.simplify"]], "simplify() (pycbd.converters.latexify.functions.eq method)": [[63, "pyCBD.converters.latexify.functions.Eq.simplify"]], "simplify() (pycbd.converters.latexify.functions.fnc method)": [[63, "pyCBD.converters.latexify.functions.Fnc.simplify"]], "simplify() (pycbd.converters.latexify.functions.multifnc method)": [[63, "pyCBD.converters.latexify.functions.MultiFnc.simplify"]], "simplify() (pycbd.converters.latexify.functions.unaryfnc method)": [[63, "pyCBD.converters.latexify.functions.UnaryFnc.simplify"]], "depgraph (class in pycbd.depgraph)": [[64, "pyCBD.depGraph.DepGraph"]], "depnode (class in pycbd.depgraph)": [[64, "pyCBD.depGraph.DepNode"]], "addmember() (pycbd.depgraph.depgraph method)": [[64, "pyCBD.depGraph.DepGraph.addMember"]], "createdepgraph() (in module pycbd.depgraph)": [[64, "pyCBD.depGraph.createDepGraph"]], "getdependents() (pycbd.depgraph.depgraph method)": [[64, "pyCBD.depGraph.DepGraph.getDependents"]], "getinfluencers() (pycbd.depgraph.depgraph method)": [[64, "pyCBD.depGraph.DepGraph.getInfluencers"]], "getmappedobj() (pycbd.depgraph.depnode method)": [[64, "pyCBD.depGraph.DepNode.getMappedObj"]], "getsemanticmapping() (pycbd.depgraph.depgraph method)": [[64, "pyCBD.depGraph.DepGraph.getSemanticMapping"]], "gvdepgraph() (in module pycbd.depgraph)": [[64, "pyCBD.depGraph.gvDepGraph"]], "hasdependency() (pycbd.depgraph.depgraph method)": [[64, "pyCBD.depGraph.DepGraph.hasDependency"]], "hasmember() (pycbd.depgraph.depgraph method)": [[64, "pyCBD.depGraph.DepGraph.hasMember"]], "ismarked() (pycbd.depgraph.depgraph method)": [[64, "pyCBD.depGraph.DepGraph.isMarked"]], "ismarked() (pycbd.depgraph.depnode method)": [[64, "pyCBD.depGraph.DepNode.isMarked"]], "mark() (pycbd.depgraph.depgraph method)": [[64, "pyCBD.depGraph.DepGraph.mark"]], "mark() (pycbd.depgraph.depnode method)": [[64, "pyCBD.depGraph.DepNode.mark"]], "pycbd.depgraph": [[64, "module-pyCBD.depGraph"]], "removemember() (pycbd.depgraph.depgraph method)": [[64, "pyCBD.depGraph.DepGraph.removeMember"]], "setdependency() (pycbd.depgraph.depgraph method)": [[64, "pyCBD.depGraph.DepGraph.setDependency"]], "unmark() (pycbd.depgraph.depgraph method)": [[64, "pyCBD.depGraph.DepGraph.unMark"]], "unmark() (pycbd.depgraph.depnode method)": [[64, "pyCBD.depGraph.DepNode.unMark"]], "unsetdependency() (pycbd.depgraph.depgraph method)": [[64, "pyCBD.depGraph.DepGraph.unsetDependency"]], "pycbd.lib": [[65, "module-pyCBD.lib"]], "collectorblock (class in pycbd.lib.endpoints)": [[66, "pyCBD.lib.endpoints.CollectorBlock"]], "positioncollectorblock (class in pycbd.lib.endpoints)": [[66, "pyCBD.lib.endpoints.PositionCollectorBlock"]], "signalcollectorblock (class in pycbd.lib.endpoints)": [[66, "pyCBD.lib.endpoints.SignalCollectorBlock"]], "statisticscollectorblock (class in pycbd.lib.endpoints)": [[66, "pyCBD.lib.endpoints.StatisticsCollectorBlock"]], "clear() (pycbd.lib.endpoints.collectorblock method)": [[66, "pyCBD.lib.endpoints.CollectorBlock.clear"]], "clear() (pycbd.lib.endpoints.positioncollectorblock method)": [[66, "pyCBD.lib.endpoints.PositionCollectorBlock.clear"]], "clear() (pycbd.lib.endpoints.signalcollectorblock method)": [[66, "pyCBD.lib.endpoints.SignalCollectorBlock.clear"]], "clear() (pycbd.lib.endpoints.statisticscollectorblock method)": [[66, "pyCBD.lib.endpoints.StatisticsCollectorBlock.clear"]], "compute() (pycbd.lib.endpoints.collectorblock method)": [[66, "pyCBD.lib.endpoints.CollectorBlock.compute"]], "compute() (pycbd.lib.endpoints.positioncollectorblock method)": [[66, "pyCBD.lib.endpoints.PositionCollectorBlock.compute"]], "compute() (pycbd.lib.endpoints.signalcollectorblock method)": [[66, "pyCBD.lib.endpoints.SignalCollectorBlock.compute"]], "compute() (pycbd.lib.endpoints.statisticscollectorblock method)": [[66, "pyCBD.lib.endpoints.StatisticsCollectorBlock.compute"]], "count() (pycbd.lib.endpoints.statisticscollectorblock method)": [[66, "pyCBD.lib.endpoints.StatisticsCollectorBlock.count"]], "data (pycbd.lib.endpoints.collectorblock property)": [[66, "pyCBD.lib.endpoints.CollectorBlock.data"]], "data_xy (pycbd.lib.endpoints.positioncollectorblock property)": [[66, "pyCBD.lib.endpoints.PositionCollectorBlock.data_xy"]], "data_xy (pycbd.lib.endpoints.signalcollectorblock property)": [[66, "pyCBD.lib.endpoints.SignalCollectorBlock.data_xy"]], "distance_from_last() (pycbd.lib.endpoints.positioncollectorblock method)": [[66, "pyCBD.lib.endpoints.PositionCollectorBlock.distance_from_last"]], "distance_from_start() (pycbd.lib.endpoints.positioncollectorblock method)": [[66, "pyCBD.lib.endpoints.PositionCollectorBlock.distance_from_start"]], "max() (pycbd.lib.endpoints.statisticscollectorblock method)": [[66, "pyCBD.lib.endpoints.StatisticsCollectorBlock.max"]], "mean() (pycbd.lib.endpoints.statisticscollectorblock method)": [[66, "pyCBD.lib.endpoints.StatisticsCollectorBlock.mean"]], "min() (pycbd.lib.endpoints.statisticscollectorblock method)": [[66, "pyCBD.lib.endpoints.StatisticsCollectorBlock.min"]], "pycbd.lib.endpoints": [[66, "module-pyCBD.lib.endpoints"]], "std() (pycbd.lib.endpoints.statisticscollectorblock method)": [[66, "pyCBD.lib.endpoints.StatisticsCollectorBlock.std"]], "sum() (pycbd.lib.endpoints.statisticscollectorblock method)": [[66, "pyCBD.lib.endpoints.StatisticsCollectorBlock.sum"]], "sumofsquares() (pycbd.lib.endpoints.statisticscollectorblock method)": [[66, "pyCBD.lib.endpoints.StatisticsCollectorBlock.sumOfSquares"]], "variance() (pycbd.lib.endpoints.statisticscollectorblock method)": [[66, "pyCBD.lib.endpoints.StatisticsCollectorBlock.variance"]], "pycbd.lib.extra": [[68, "module-pyCBD.lib.extra"]], "first (pycbd.lib.io.interpolation attribute)": [[69, "pyCBD.lib.io.Interpolation.FIRST"]], "interpolation (class in pycbd.lib.io)": [[69, "pyCBD.lib.io.Interpolation"]], "last (pycbd.lib.io.interpolation attribute)": [[69, "pyCBD.lib.io.Interpolation.LAST"]], "linear (pycbd.lib.io.interpolation attribute)": [[69, "pyCBD.lib.io.Interpolation.LINEAR"]], "readcsv (class in pycbd.lib.io)": [[69, "pyCBD.lib.io.ReadCSV"]], "writecsv (class in pycbd.lib.io)": [[69, "pyCBD.lib.io.WriteCSV"]], "compute() (pycbd.lib.io.readcsv method)": [[69, "pyCBD.lib.io.ReadCSV.compute"]], "compute() (pycbd.lib.io.writecsv method)": [[69, "pyCBD.lib.io.WriteCSV.compute"]], "interpolate() (pycbd.lib.io.interpolation static method)": [[69, "pyCBD.lib.io.Interpolation.interpolate"]], "pycbd.lib.io": [[69, "module-pyCBD.lib.io"]], "absblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.AbsBlock"]], "addoneblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.AddOneBlock"]], "adderblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.AdderBlock"]], "andblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.AndBlock"]], "clampblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.ClampBlock"]], "clock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.Clock"]], "constantblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.ConstantBlock"]], "delayblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.DelayBlock"]], "deltatblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.DeltaTBlock"]], "derivatorblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.DerivatorBlock"]], "equalsblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.EqualsBlock"]], "genericblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.GenericBlock"]], "intblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.IntBlock"]], "integratorblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.IntegratorBlock"]], "inverterblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.InverterBlock"]], "lessthanblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.LessThanBlock"]], "lessthanorequalsblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.LessThanOrEqualsBlock"]], "loggingblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.LoggingBlock"]], "maxblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.MaxBlock"]], "minblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.MinBlock"]], "moduloblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.ModuloBlock"]], "multiplexerblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.MultiplexerBlock"]], "negatorblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.NegatorBlock"]], "notblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.NotBlock"]], "orblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.OrBlock"]], "powerblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.PowerBlock"]], "productblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.ProductBlock"]], "rootblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.RootBlock"]], "sequenceblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.SequenceBlock"]], "splitblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.SplitBlock"]], "timeblock (class in pycbd.lib.std)": [[70, "pyCBD.lib.std.TimeBlock"]], "compute() (pycbd.lib.std.absblock method)": [[70, "pyCBD.lib.std.AbsBlock.compute"]], "compute() (pycbd.lib.std.adderblock method)": [[70, "pyCBD.lib.std.AdderBlock.compute"]], "compute() (pycbd.lib.std.andblock method)": [[70, "pyCBD.lib.std.AndBlock.compute"]], "compute() (pycbd.lib.std.clampblock method)": [[70, "pyCBD.lib.std.ClampBlock.compute"]], "compute() (pycbd.lib.std.clock method)": [[70, "pyCBD.lib.std.Clock.compute"]], "compute() (pycbd.lib.std.constantblock method)": [[70, "pyCBD.lib.std.ConstantBlock.compute"]], "compute() (pycbd.lib.std.delayblock method)": [[70, "pyCBD.lib.std.DelayBlock.compute"]], "compute() (pycbd.lib.std.deltatblock method)": [[70, "pyCBD.lib.std.DeltaTBlock.compute"]], "compute() (pycbd.lib.std.equalsblock method)": [[70, "pyCBD.lib.std.EqualsBlock.compute"]], "compute() (pycbd.lib.std.genericblock method)": [[70, "pyCBD.lib.std.GenericBlock.compute"]], "compute() (pycbd.lib.std.intblock method)": [[70, "pyCBD.lib.std.IntBlock.compute"]], "compute() (pycbd.lib.std.inverterblock method)": [[70, "pyCBD.lib.std.InverterBlock.compute"]], "compute() (pycbd.lib.std.lessthanblock method)": [[70, "pyCBD.lib.std.LessThanBlock.compute"]], "compute() (pycbd.lib.std.lessthanorequalsblock method)": [[70, "pyCBD.lib.std.LessThanOrEqualsBlock.compute"]], "compute() (pycbd.lib.std.loggingblock method)": [[70, "pyCBD.lib.std.LoggingBlock.compute"]], "compute() (pycbd.lib.std.maxblock method)": [[70, "pyCBD.lib.std.MaxBlock.compute"]], "compute() (pycbd.lib.std.minblock method)": [[70, "pyCBD.lib.std.MinBlock.compute"]], "compute() (pycbd.lib.std.moduloblock method)": [[70, "pyCBD.lib.std.ModuloBlock.compute"]], "compute() (pycbd.lib.std.multiplexerblock method)": [[70, "pyCBD.lib.std.MultiplexerBlock.compute"]], "compute() (pycbd.lib.std.negatorblock method)": [[70, "pyCBD.lib.std.NegatorBlock.compute"]], "compute() (pycbd.lib.std.notblock method)": [[70, "pyCBD.lib.std.NotBlock.compute"]], "compute() (pycbd.lib.std.orblock method)": [[70, "pyCBD.lib.std.OrBlock.compute"]], "compute() (pycbd.lib.std.powerblock method)": [[70, "pyCBD.lib.std.PowerBlock.compute"]], "compute() (pycbd.lib.std.productblock method)": [[70, "pyCBD.lib.std.ProductBlock.compute"]], "compute() (pycbd.lib.std.rootblock method)": [[70, "pyCBD.lib.std.RootBlock.compute"]], "compute() (pycbd.lib.std.sequenceblock method)": [[70, "pyCBD.lib.std.SequenceBlock.compute"]], "compute() (pycbd.lib.std.splitblock method)": [[70, "pyCBD.lib.std.SplitBlock.compute"]], "compute() (pycbd.lib.std.timeblock method)": [[70, "pyCBD.lib.std.TimeBlock.compute"]], "defaultinputportnameidentifier() (pycbd.lib.std.clampblock method)": [[70, "pyCBD.lib.std.ClampBlock.defaultInputPortNameIdentifier"]], "defaultinputportnameidentifier() (pycbd.lib.std.lessthanblock method)": [[70, "pyCBD.lib.std.LessThanBlock.defaultInputPortNameIdentifier"]], "defaultinputportnameidentifier() (pycbd.lib.std.lessthanorequalsblock method)": [[70, "pyCBD.lib.std.LessThanOrEqualsBlock.defaultInputPortNameIdentifier"]], "defaultinputportnameidentifier() (pycbd.lib.std.moduloblock method)": [[70, "pyCBD.lib.std.ModuloBlock.defaultInputPortNameIdentifier"]], "defaultinputportnameidentifier() (pycbd.lib.std.multiplexerblock method)": [[70, "pyCBD.lib.std.MultiplexerBlock.defaultInputPortNameIdentifier"]], "defaultinputportnameidentifier() (pycbd.lib.std.powerblock method)": [[70, "pyCBD.lib.std.PowerBlock.defaultInputPortNameIdentifier"]], "defaultinputportnameidentifier() (pycbd.lib.std.rootblock method)": [[70, "pyCBD.lib.std.RootBlock.defaultInputPortNameIdentifier"]], "getblockoperator() (pycbd.lib.std.genericblock method)": [[70, "pyCBD.lib.std.GenericBlock.getBlockOperator"]], "getdeltat() (pycbd.lib.std.clock method)": [[70, "pyCBD.lib.std.Clock.getDeltaT"]], "getdependencies() (pycbd.lib.std.clock method)": [[70, "pyCBD.lib.std.Clock.getDependencies"]], "getdependencies() (pycbd.lib.std.delayblock method)": [[70, "pyCBD.lib.std.DelayBlock.getDependencies"]], "getnumberofinputs() (pycbd.lib.std.adderblock method)": [[70, "pyCBD.lib.std.AdderBlock.getNumberOfInputs"]], "getnumberofinputs() (pycbd.lib.std.andblock method)": [[70, "pyCBD.lib.std.AndBlock.getNumberOfInputs"]], "getnumberofinputs() (pycbd.lib.std.maxblock method)": [[70, "pyCBD.lib.std.MaxBlock.getNumberOfInputs"]], "getnumberofinputs() (pycbd.lib.std.minblock method)": [[70, "pyCBD.lib.std.MinBlock.getNumberOfInputs"]], "getnumberofinputs() (pycbd.lib.std.multiplexerblock method)": [[70, "pyCBD.lib.std.MultiplexerBlock.getNumberOfInputs"]], "getnumberofinputs() (pycbd.lib.std.orblock method)": [[70, "pyCBD.lib.std.OrBlock.getNumberOfInputs"]], "getnumberofinputs() (pycbd.lib.std.productblock method)": [[70, "pyCBD.lib.std.ProductBlock.getNumberOfInputs"]], "getnumberofoutputs() (pycbd.lib.std.splitblock method)": [[70, "pyCBD.lib.std.SplitBlock.getNumberOfOutputs"]], "getrelativetime() (pycbd.lib.std.clock method)": [[70, "pyCBD.lib.std.Clock.getRelativeTime"]], "getstarttime() (pycbd.lib.std.clock method)": [[70, "pyCBD.lib.std.Clock.getStartTime"]], "gettime() (pycbd.lib.std.clock method)": [[70, "pyCBD.lib.std.Clock.getTime"]], "getvalue() (pycbd.lib.std.constantblock method)": [[70, "pyCBD.lib.std.ConstantBlock.getValue"]], "getvalue() (pycbd.lib.std.deltatblock method)": [[70, "pyCBD.lib.std.DeltaTBlock.getValue"]], "pycbd.lib.std": [[70, "module-pyCBD.lib.std"]], "reset() (pycbd.lib.std.clock method)": [[70, "pyCBD.lib.std.Clock.reset"]], "setdeltat() (pycbd.lib.std.clock method)": [[70, "pyCBD.lib.std.Clock.setDeltaT"]], "setstarttime() (pycbd.lib.std.clock method)": [[70, "pyCBD.lib.std.Clock.setStartTime"]], "setvalue() (pycbd.lib.std.constantblock method)": [[70, "pyCBD.lib.std.ConstantBlock.setValue"]], "pycbd.loopsolvers": [[71, "module-pyCBD.loopsolvers"]], "linearsolver (class in pycbd.loopsolvers.linearsolver)": [[72, "pyCBD.loopsolvers.linearsolver.LinearSolver"]], "matrix (class in pycbd.loopsolvers.linearsolver)": [[72, "pyCBD.loopsolvers.linearsolver.Matrix"]], "checkvalidity() (pycbd.loopsolvers.linearsolver.linearsolver method)": [[72, "pyCBD.loopsolvers.linearsolver.LinearSolver.checkValidity"]], "concat() (pycbd.loopsolvers.linearsolver.matrix method)": [[72, "pyCBD.loopsolvers.linearsolver.Matrix.concat"]], "constructinput() (pycbd.loopsolvers.linearsolver.linearsolver method)": [[72, "pyCBD.loopsolvers.linearsolver.LinearSolver.constructInput"]], "format() (pycbd.loopsolvers.linearsolver.matrix method)": [[72, "pyCBD.loopsolvers.linearsolver.Matrix.format"]], "get_matrix() (pycbd.loopsolvers.linearsolver.linearsolver static method)": [[72, "pyCBD.loopsolvers.linearsolver.LinearSolver.get_matrix"]], "pycbd.loopsolvers.linearsolver": [[72, "module-pyCBD.loopsolvers.linearsolver"]], "solve() (pycbd.loopsolvers.linearsolver.linearsolver method)": [[72, "pyCBD.loopsolvers.linearsolver.LinearSolver.solve"]], "solver (class in pycbd.loopsolvers.solver)": [[73, "pyCBD.loopsolvers.solver.Solver"]], "checkvalidity() (pycbd.loopsolvers.solver.solver method)": [[73, "pyCBD.loopsolvers.solver.Solver.checkValidity"]], "constructinput() (pycbd.loopsolvers.solver.solver method)": [[73, "pyCBD.loopsolvers.solver.Solver.constructInput"]], "pycbd.loopsolvers.solver": [[73, "module-pyCBD.loopsolvers.solver"]], "solve() (pycbd.loopsolvers.solver.solver method)": [[73, "pyCBD.loopsolvers.solver.Solver.solve"]], "sympysolver (class in pycbd.loopsolvers.sympysolver)": [[74, "pyCBD.loopsolvers.sympysolver.SympySolver"]], "checkvalidity() (pycbd.loopsolvers.sympysolver.sympysolver method)": [[74, "pyCBD.loopsolvers.sympysolver.SympySolver.checkValidity"]], "constructinput() (pycbd.loopsolvers.sympysolver.sympysolver method)": [[74, "pyCBD.loopsolvers.sympysolver.SympySolver.constructInput"]], "getcomponentcache() (pycbd.loopsolvers.sympysolver.sympysolver method)": [[74, "pyCBD.loopsolvers.sympysolver.SympySolver.getComponentCache"]], "pycbd.loopsolvers.sympysolver": [[74, "module-pyCBD.loopsolvers.sympysolver"]], "reduce() (in module pycbd.loopsolvers.sympysolver)": [[74, "pyCBD.loopsolvers.sympysolver.reduce"]], "solve() (pycbd.loopsolvers.sympysolver.sympysolver method)": [[74, "pyCBD.loopsolvers.sympysolver.SympySolver.solve"]], "pycbd.naivelog": [[75, "module-pyCBD.naivelog"]], "pycbd.preprocessing": [[76, "module-pyCBD.preprocessing"]], "bogackishampine() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.BogackiShampine"]], "butchertableau (class in pycbd.preprocessing.butcher)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau"]], "cashkarp() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.CashKarp"]], "dopri() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.DOPRI"]], "dormandprince() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.DormandPrince"]], "euler() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.Euler"]], "heun() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.Heun"]], "heuneuler() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.HeunEuler"]], "midpoint() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.Midpoint"]], "midpointeuler() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.MidpointEuler"]], "rk4() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.RK4"]], "rk4alt() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.RK4Alt"]], "rkck() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.RKCK"]], "rkdp() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.RKDP"]], "rkf45() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.RKF45"]], "ralston() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.Ralston"]], "ralstoneuler() (pycbd.preprocessing.butcher.butchertableau static method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.RalstonEuler"]], "addrow() (pycbd.preprocessing.butcher.butchertableau method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.addRow"]], "addweights() (pycbd.preprocessing.butcher.butchertableau method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.addWeights"]], "geta() (pycbd.preprocessing.butcher.butchertableau method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.getA"]], "getnodes() (pycbd.preprocessing.butcher.butchertableau method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.getNodes"]], "getorder() (pycbd.preprocessing.butcher.butchertableau method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.getOrder"]], "getweights() (pycbd.preprocessing.butcher.butchertableau method)": [[77, "pyCBD.preprocessing.butcher.ButcherTableau.getWeights"]], "pycbd.preprocessing.butcher": [[77, "module-pyCBD.preprocessing.butcher"]], "rkpreprocessor (class in pycbd.preprocessing.rungekutta)": [[78, "pyCBD.preprocessing.rungekutta.RKPreprocessor"]], "collect() (pycbd.preprocessing.rungekutta.rkpreprocessor method)": [[78, "pyCBD.preprocessing.rungekutta.RKPreprocessor.collect"]], "create_error() (pycbd.preprocessing.rungekutta.rkpreprocessor method)": [[78, "pyCBD.preprocessing.rungekutta.RKPreprocessor.create_Error"]], "create_ivp() (pycbd.preprocessing.rungekutta.rkpreprocessor method)": [[78, "pyCBD.preprocessing.rungekutta.RKPreprocessor.create_IVP"]], "create_k() (pycbd.preprocessing.rungekutta.rkpreprocessor method)": [[78, "pyCBD.preprocessing.rungekutta.RKPreprocessor.create_K"]], "create_rk() (pycbd.preprocessing.rungekutta.rkpreprocessor method)": [[78, "pyCBD.preprocessing.rungekutta.RKPreprocessor.create_RK"]], "preprocess() (pycbd.preprocessing.rungekutta.rkpreprocessor method)": [[78, "pyCBD.preprocessing.rungekutta.RKPreprocessor.preprocess"]], "pycbd.preprocessing.rungekutta": [[78, "module-pyCBD.preprocessing.rungekutta"]], "pycbd.realtime": [[79, "module-pyCBD.realtime"]], "pycbd.realtime.accurate_time": [[80, "module-pyCBD.realtime.accurate_time"]], "sleep() (in module pycbd.realtime.accurate_time)": [[80, "pyCBD.realtime.accurate_time.sleep"]], "time() (in module pycbd.realtime.accurate_time)": [[80, "pyCBD.realtime.accurate_time.time"]], "arrow (class in pycbd.realtime.plotting)": [[81, "pyCBD.realtime.plotting.Arrow"]], "bokeh (pycbd.realtime.plotting.backend attribute)": [[81, "pyCBD.realtime.plotting.Backend.BOKEH"]], "backend (class in pycbd.realtime.plotting)": [[81, "pyCBD.realtime.plotting.Backend"]], "lineplot (class in pycbd.realtime.plotting)": [[81, "pyCBD.realtime.plotting.LinePlot"]], "matplotlib (pycbd.realtime.plotting.backend attribute)": [[81, "pyCBD.realtime.plotting.Backend.MATPLOTLIB"]], "mpl (pycbd.realtime.plotting.backend attribute)": [[81, "pyCBD.realtime.plotting.Backend.MPL"]], "plothandler (class in pycbd.realtime.plotting)": [[81, "pyCBD.realtime.plotting.PlotHandler"]], "plotkind (class in pycbd.realtime.plotting)": [[81, "pyCBD.realtime.plotting.PlotKind"]], "plotmanager (class in pycbd.realtime.plotting)": [[81, "pyCBD.realtime.plotting.PlotManager"]], "seaborn (pycbd.realtime.plotting.backend attribute)": [[81, "pyCBD.realtime.plotting.Backend.SEABORN"]], "sns (pycbd.realtime.plotting.backend attribute)": [[81, "pyCBD.realtime.plotting.Backend.SNS"]], "scatterplot (class in pycbd.realtime.plotting)": [[81, "pyCBD.realtime.plotting.ScatterPlot"]], "stepplot (class in pycbd.realtime.plotting)": [[81, "pyCBD.realtime.plotting.StepPlot"]], "all_opened() (pycbd.realtime.plotting.plotmanager method)": [[81, "pyCBD.realtime.plotting.PlotManager.all_opened"]], "close_event() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.close_event"]], "compare() (pycbd.realtime.plotting.backend static method)": [[81, "pyCBD.realtime.plotting.Backend.compare"]], "connect() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.connect"]], "connect() (pycbd.realtime.plotting.plotmanager method)": [[81, "pyCBD.realtime.plotting.PlotManager.connect"]], "create() (pycbd.realtime.plotting.arrow method)": [[81, "pyCBD.realtime.plotting.Arrow.create"]], "create() (pycbd.realtime.plotting.lineplot method)": [[81, "pyCBD.realtime.plotting.LinePlot.create"]], "create() (pycbd.realtime.plotting.plotkind method)": [[81, "pyCBD.realtime.plotting.PlotKind.create"]], "create() (pycbd.realtime.plotting.scatterplot method)": [[81, "pyCBD.realtime.plotting.ScatterPlot.create"]], "create() (pycbd.realtime.plotting.stepplot method)": [[81, "pyCBD.realtime.plotting.StepPlot.create"]], "exists() (pycbd.realtime.plotting.backend static method)": [[81, "pyCBD.realtime.plotting.Backend.exists"]], "follow() (in module pycbd.realtime.plotting)": [[81, "pyCBD.realtime.plotting.follow"]], "get() (pycbd.realtime.plotting.backend static method)": [[81, "pyCBD.realtime.plotting.Backend.get"]], "get() (pycbd.realtime.plotting.plotmanager method)": [[81, "pyCBD.realtime.plotting.PlotManager.get"]], "get_animation() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.get_animation"]], "get_data() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.get_data"]], "hide() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.hide"]], "is_backend() (pycbd.realtime.plotting.plotkind method)": [[81, "pyCBD.realtime.plotting.PlotKind.is_backend"]], "is_opened() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.is_opened"]], "is_opened() (pycbd.realtime.plotting.plotmanager method)": [[81, "pyCBD.realtime.plotting.PlotManager.is_opened"]], "plot() (in module pycbd.realtime.plotting)": [[81, "pyCBD.realtime.plotting.plot"]], "pycbd.realtime.plotting": [[81, "module-pyCBD.realtime.plotting"]], "register() (pycbd.realtime.plotting.plotmanager method)": [[81, "pyCBD.realtime.plotting.PlotManager.register"]], "set_data_getter() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.set_data_getter"]], "set_kind_args() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.set_kind_args"]], "set_xlim() (pycbd.realtime.plotting.plotmanager method)": [[81, "pyCBD.realtime.plotting.PlotManager.set_xlim"]], "set_ylim() (pycbd.realtime.plotting.plotmanager method)": [[81, "pyCBD.realtime.plotting.PlotManager.set_ylim"]], "show() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.show"]], "signal() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.signal"]], "stop() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.stop"]], "stop() (pycbd.realtime.plotting.plotmanager method)": [[81, "pyCBD.realtime.plotting.PlotManager.stop"]], "terminate() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.terminate"]], "terminate() (pycbd.realtime.plotting.plotmanager method)": [[81, "pyCBD.realtime.plotting.PlotManager.terminate"]], "toggle() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.toggle"]], "unregister() (pycbd.realtime.plotting.plotmanager method)": [[81, "pyCBD.realtime.plotting.PlotManager.unregister"]], "update() (pycbd.realtime.plotting.arrow method)": [[81, "pyCBD.realtime.plotting.Arrow.update"]], "update() (pycbd.realtime.plotting.lineplot method)": [[81, "pyCBD.realtime.plotting.LinePlot.update"]], "update() (pycbd.realtime.plotting.plothandler method)": [[81, "pyCBD.realtime.plotting.PlotHandler.update"]], "update() (pycbd.realtime.plotting.plotkind method)": [[81, "pyCBD.realtime.plotting.PlotKind.update"]], "update() (pycbd.realtime.plotting.scatterplot method)": [[81, "pyCBD.realtime.plotting.ScatterPlot.update"]], "update() (pycbd.realtime.plotting.stepplot method)": [[81, "pyCBD.realtime.plotting.StepPlot.update"]], "gameloop (pycbd.realtime.threadingbackend.platform attribute)": [[82, "pyCBD.realtime.threadingBackend.Platform.GAMELOOP"]], "gla (pycbd.realtime.threadingbackend.platform attribute)": [[82, "pyCBD.realtime.threadingBackend.Platform.GLA"]], "loop (pycbd.realtime.threadingbackend.platform attribute)": [[82, "pyCBD.realtime.threadingBackend.Platform.LOOP"]], "python (pycbd.realtime.threadingbackend.platform attribute)": [[82, "pyCBD.realtime.threadingBackend.Platform.PYTHON"]], "platform (class in pycbd.realtime.threadingbackend)": [[82, "pyCBD.realtime.threadingBackend.Platform"]], "threading (pycbd.realtime.threadingbackend.platform attribute)": [[82, "pyCBD.realtime.threadingBackend.Platform.THREADING"]], "tk (pycbd.realtime.threadingbackend.platform attribute)": [[82, "pyCBD.realtime.threadingBackend.Platform.TK"]], "tkinter (pycbd.realtime.threadingbackend.platform attribute)": [[82, "pyCBD.realtime.threadingBackend.Platform.TKINTER"]], "threadingbackend (class in pycbd.realtime.threadingbackend)": [[82, "pyCBD.realtime.threadingBackend.ThreadingBackend"]], "is_alive() (pycbd.realtime.threadingbackend.threadingbackend method)": [[82, "pyCBD.realtime.threadingBackend.ThreadingBackend.is_alive"]], "pycbd.realtime.threadingbackend": [[82, "module-pyCBD.realtime.threadingBackend"]], "run_on_new_thread() (pycbd.realtime.threadingbackend.threadingbackend method)": [[82, "pyCBD.realtime.threadingBackend.ThreadingBackend.run_on_new_thread"]], "step() (pycbd.realtime.threadingbackend.threadingbackend method)": [[82, "pyCBD.realtime.threadingBackend.ThreadingBackend.step"]], "wait() (pycbd.realtime.threadingbackend.threadingbackend method)": [[82, "pyCBD.realtime.threadingBackend.ThreadingBackend.wait"]], "threadinggameloop (class in pycbd.realtime.threadinggameloop)": [[83, "pyCBD.realtime.threadingGameLoop.ThreadingGameLoop"]], "pycbd.realtime.threadinggameloop": [[83, "module-pyCBD.realtime.threadingGameLoop"]], "step() (pycbd.realtime.threadinggameloop.threadinggameloop method)": [[83, "pyCBD.realtime.threadingGameLoop.ThreadingGameLoop.step"]], "wait() (pycbd.realtime.threadinggameloop.threadinggameloop method)": [[83, "pyCBD.realtime.threadingGameLoop.ThreadingGameLoop.wait"]], "threadinggameloopalt (class in pycbd.realtime.threadinggameloopalt)": [[84, "pyCBD.realtime.threadingGameLoopAlt.ThreadingGameLoopAlt"]], "pycbd.realtime.threadinggameloopalt": [[84, "module-pyCBD.realtime.threadingGameLoopAlt"]], "step() (pycbd.realtime.threadinggameloopalt.threadinggameloopalt method)": [[84, "pyCBD.realtime.threadingGameLoopAlt.ThreadingGameLoopAlt.step"]], "wait() (pycbd.realtime.threadinggameloopalt.threadinggameloopalt method)": [[84, "pyCBD.realtime.threadingGameLoopAlt.ThreadingGameLoopAlt.wait"]], "threadingpython (class in pycbd.realtime.threadingpython)": [[85, "pyCBD.realtime.threadingPython.ThreadingPython"]], "pycbd.realtime.threadingpython": [[85, "module-pyCBD.realtime.threadingPython"]], "run() (pycbd.realtime.threadingpython.threadingpython method)": [[85, "pyCBD.realtime.threadingPython.ThreadingPython.run"]], "wait() (pycbd.realtime.threadingpython.threadingpython method)": [[85, "pyCBD.realtime.threadingPython.ThreadingPython.wait"]], "threadingtkinter (class in pycbd.realtime.threadingtkinter)": [[86, "pyCBD.realtime.threadingTkInter.ThreadingTkInter"]], "pycbd.realtime.threadingtkinter": [[86, "module-pyCBD.realtime.threadingTkInter"]], "wait() (pycbd.realtime.threadingtkinter.threadingtkinter method)": [[86, "pyCBD.realtime.threadingTkInter.ThreadingTkInter.wait"]], "scheduler (class in pycbd.scheduling)": [[87, "pyCBD.scheduling.Scheduler"]], "topologicalscheduler (class in pycbd.scheduling)": [[87, "pyCBD.scheduling.TopologicalScheduler"]], "dfscollect() (pycbd.scheduling.topologicalscheduler method)": [[87, "pyCBD.scheduling.TopologicalScheduler.dfsCollect"]], "dfssort() (pycbd.scheduling.topologicalscheduler method)": [[87, "pyCBD.scheduling.TopologicalScheduler.dfsSort"]], "mustcompute() (pycbd.scheduling.scheduler method)": [[87, "pyCBD.scheduling.Scheduler.mustCompute"]], "obtain() (pycbd.scheduling.scheduler method)": [[87, "pyCBD.scheduling.Scheduler.obtain"]], "pycbd.scheduling": [[87, "module-pyCBD.scheduling"]], "schedule() (pycbd.scheduling.scheduler method)": [[87, "pyCBD.scheduling.Scheduler.schedule"]], "schedule() (pycbd.scheduling.topologicalscheduler method)": [[87, "pyCBD.scheduling.TopologicalScheduler.schedule"]], "setrate() (pycbd.scheduling.scheduler method)": [[87, "pyCBD.scheduling.Scheduler.setRate"]], "toposort() (pycbd.scheduling.topologicalscheduler method)": [[87, "pyCBD.scheduling.TopologicalScheduler.topoSort"]], "simulator (class in pycbd.simulator)": [[88, "pyCBD.simulator.Simulator"]], "connect() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.connect"]], "getclock() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.getClock"]], "getdeltat() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.getDeltaT"]], "getrelativetime() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.getRelativeTime"]], "gettime() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.getTime"]], "is_running() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.is_running"]], "pycbd.simulator": [[88, "module-pyCBD.simulator"]], "realtime_gameloop_call() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.realtime_gameloop_call"]], "registerstateevent() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.registerStateEvent"]], "run() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.run"]], "setalgebraicloopsolver() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setAlgebraicLoopSolver"]], "setblockrate() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setBlockRate"]], "setcommunicationinterval() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setCommunicationInterval"]], "setcustomtracer() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setCustomTracer"]], "setdeltat() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setDeltaT"]], "setprogressbar() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setProgressBar"]], "setrealtime() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setRealTime"]], "setrealtimeplatform() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setRealTimePlatform"]], "setrealtimeplatformgameloop() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setRealTimePlatformGameLoop"]], "setrealtimeplatformthreading() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setRealTimePlatformThreading"]], "setrealtimeplatformtk() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setRealTimePlatformTk"]], "setscheduler() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setScheduler"]], "setstateeventlocator() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setStateEventLocator"]], "setterminationcondition() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setTerminationCondition"]], "setterminationtime() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setTerminationTime"]], "setverbose() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.setVerbose"]], "signal() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.signal"]], "stop() (pycbd.simulator.simulator method)": [[88, "pyCBD.simulator.Simulator.stop"]], "any (pycbd.state_events.direction attribute)": [[89, "pyCBD.state_events.Direction.ANY"]], "direction (class in pycbd.state_events)": [[89, "pyCBD.state_events.Direction"]], "from_above (pycbd.state_events.direction attribute)": [[89, "pyCBD.state_events.Direction.FROM_ABOVE"]], "from_below (pycbd.state_events.direction attribute)": [[89, "pyCBD.state_events.Direction.FROM_BELOW"]], "stateevent (class in pycbd.state_events)": [[89, "pyCBD.state_events.StateEvent"]], "pycbd.state_events": [[89, "module-pyCBD.state_events"]], "bisectionstateeventlocator (class in pycbd.state_events.locators)": [[90, "pyCBD.state_events.locators.BisectionStateEventLocator"]], "itpstateeventlocator (class in pycbd.state_events.locators)": [[90, "pyCBD.state_events.locators.ITPStateEventLocator"]], "linearstateeventlocator (class in pycbd.state_events.locators)": [[90, "pyCBD.state_events.locators.LinearStateEventLocator"]], "postcrossingstateeventlocator (class in pycbd.state_events.locators)": [[90, "pyCBD.state_events.locators.PostCrossingStateEventLocator"]], "precrossingstateeventlocator (class in pycbd.state_events.locators)": [[90, "pyCBD.state_events.locators.PreCrossingStateEventLocator"]], "regulafalsistateeventlocator (class in pycbd.state_events.locators)": [[90, "pyCBD.state_events.locators.RegulaFalsiStateEventLocator"]], "algorithm() (pycbd.state_events.locators.bisectionstateeventlocator method)": [[90, "pyCBD.state_events.locators.BisectionStateEventLocator.algorithm"]], "algorithm() (pycbd.state_events.locators.itpstateeventlocator method)": [[90, "pyCBD.state_events.locators.ITPStateEventLocator.algorithm"]], "algorithm() (pycbd.state_events.locators.linearstateeventlocator method)": [[90, "pyCBD.state_events.locators.LinearStateEventLocator.algorithm"]], "algorithm() (pycbd.state_events.locators.postcrossingstateeventlocator method)": [[90, "pyCBD.state_events.locators.PostCrossingStateEventLocator.algorithm"]], "algorithm() (pycbd.state_events.locators.precrossingstateeventlocator method)": [[90, "pyCBD.state_events.locators.PreCrossingStateEventLocator.algorithm"]], "algorithm() (pycbd.state_events.locators.regulafalsistateeventlocator method)": [[90, "pyCBD.state_events.locators.RegulaFalsiStateEventLocator.algorithm"]], "pycbd.state_events.locators": [[90, "module-pyCBD.state_events.locators"]], "tracers (class in pycbd.tracers)": [[91, "pyCBD.tracers.Tracers"]], "deregistertracer() (pycbd.tracers.tracers method)": [[91, "pyCBD.tracers.Tracers.deregisterTracer"]], "getbyid() (pycbd.tracers.tracers method)": [[91, "pyCBD.tracers.Tracers.getById"]], "hastracers() (pycbd.tracers.tracers method)": [[91, "pyCBD.tracers.Tracers.hasTracers"]], "pycbd.tracers": [[91, "module-pyCBD.tracers"]], "registertracer() (pycbd.tracers.tracers method)": [[91, "pyCBD.tracers.Tracers.registerTracer"]], "starttracers() (pycbd.tracers.tracers method)": [[91, "pyCBD.tracers.Tracers.startTracers"]], "stoptracers() (pycbd.tracers.tracers method)": [[91, "pyCBD.tracers.Tracers.stopTracers"]], "thread_loop() (pycbd.tracers.tracers method)": [[91, "pyCBD.tracers.Tracers.thread_loop"]], "trace() (pycbd.tracers.tracers method)": [[91, "pyCBD.tracers.Tracers.trace"]], "tracecompute() (pycbd.tracers.tracers method)": [[91, "pyCBD.tracers.Tracers.traceCompute"]], "traceendnewiteration() (pycbd.tracers.tracers method)": [[91, "pyCBD.tracers.Tracers.traceEndNewIteration"]], "traceendsimulation() (pycbd.tracers.tracers method)": [[91, "pyCBD.tracers.Tracers.traceEndSimulation"]], "tracestartnewiteration() (pycbd.tracers.tracers method)": [[91, "pyCBD.tracers.Tracers.traceStartNewIteration"]], "basetracer (class in pycbd.tracers.basetracer)": [[92, "pyCBD.tracers.baseTracer.BaseTracer"]], "closefile() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.closeFile"]], "getinterpolator() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.getInterpolator"]], "openfile() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.openFile"]], "pycbd.tracers.basetracer": [[92, "module-pyCBD.tracers.baseTracer"]], "setinterpolator() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.setInterpolator"]], "setmodelname() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.setModelName"]], "starttracer() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.startTracer"]], "stoptracer() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.stopTracer"]], "timeinfo() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.timeInfo"]], "trace() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.trace"]], "tracecompute() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.traceCompute"]], "traceenditeration() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.traceEndIteration"]], "traceendsimulation() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.traceEndSimulation"]], "tracestartnewiteration() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.traceStartNewIteration"]], "traceln() (pycbd.tracers.basetracer.basetracer method)": [[92, "pyCBD.tracers.baseTracer.BaseTracer.traceln"]], "bblue (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BBLUE"]], "bcyan (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BCYAN"]], "bdarkgray (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BDARKGRAY"]], "bgreen (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BGREEN"]], "blblue (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BLBLUE"]], "blcyan (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BLCYAN"]], "bldarkgray (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BLDARKGRAY"]], "blgreen (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BLGREEN"]], "blightgray (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BLIGHTGRAY"]], "blink (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BLINK"]], "bllightgray (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BLLIGHTGRAY"]], "blpurple (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BLPURPLE"]], "blred (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BLRED"]], "blue (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BLUE"]], "blyellow (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BLYELLOW"]], "bold (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BOLD"]], "bpurple (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BPURPLE"]], "bred (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BRED"]], "byellow (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.BYELLOW"]], "color (class in pycbd.tracers.color)": [[93, "pyCBD.tracers.color.COLOR"]], "cyan (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.CYAN"]], "dark (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.DARK"]], "darkgray (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.DARKGRAY"]], "endc (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.ENDC"]], "green (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.GREEN"]], "highlight (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.HIGHLIGHT"]], "italic (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.ITALIC"]], "lblue (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.LBLUE"]], "lcyan (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.LCYAN"]], "ldarkgray (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.LDARKGRAY"]], "lgreen (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.LGREEN"]], "lightgray (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.LIGHTGRAY"]], "llightgray (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.LLIGHTGRAY"]], "lpurple (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.LPURPLE"]], "lred (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.LRED"]], "lyellow (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.LYELLOW"]], "oline (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.OLINE"]], "purple (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.PURPLE"]], "red (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.RED"]], "strike (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.STRIKE"]], "uline (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.ULINE"]], "uuline (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.UULINE"]], "yellow (pycbd.tracers.color.color attribute)": [[93, "pyCBD.tracers.color.COLOR.YELLOW"]], "colorize() (pycbd.tracers.color.color static method)": [[93, "pyCBD.tracers.color.COLOR.colorize"]], "pycbd.tracers.color": [[93, "module-pyCBD.tracers.color"]], "rainbow() (pycbd.tracers.color.color static method)": [[93, "pyCBD.tracers.color.COLOR.rainbow"]], "uncolorize() (pycbd.tracers.color.color static method)": [[93, "pyCBD.tracers.color.COLOR.uncolorize"]], "verbosetracer (class in pycbd.tracers.tracerverbose)": [[94, "pyCBD.tracers.tracerVerbose.VerboseTracer"]], "pycbd.tracers.tracerverbose": [[94, "module-pyCBD.tracers.tracerVerbose"]], "tracecompute() (pycbd.tracers.tracerverbose.verbosetracer method)": [[94, "pyCBD.tracers.tracerVerbose.VerboseTracer.traceCompute"]], "tracestartnewiteration() (pycbd.tracers.tracerverbose.verbosetracer method)": [[94, "pyCBD.tracers.tracerVerbose.VerboseTracer.traceStartNewIteration"]], "pycbd_version (in module pycbd.util)": [[95, "pyCBD.util.PYCBD_VERSION"]], "python_version (in module pycbd.util)": [[95, "pyCBD.util.PYTHON_VERSION"]], "enum() (in module pycbd.util)": [[95, "pyCBD.util.enum"]], "hash64() (in module pycbd.util)": [[95, "pyCBD.util.hash64"]], "pycbd.util": [[95, "module-pyCBD.util"]], "unhash64() (in module pycbd.util)": [[95, "pyCBD.util.unhash64"]]}})