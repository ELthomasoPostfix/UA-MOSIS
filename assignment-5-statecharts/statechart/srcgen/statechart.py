"""Implementation of statechart statechart.
Generated by itemis CREATE code generator.
"""

import queue
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))
from yakindu.rx import Observable

class Statechart:
	"""Implementation of the state machine Statechart.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_traffic_light,
			main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior,
			main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_on,
			main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_off,
			main_region_traffic_light_traffic_lights_handling_normal_behavior,
			main_region_traffic_light_traffic_lights_handling_normal_behavior_r1red,
			main_region_traffic_light_traffic_lights_handling_normal_behavior_r1green,
			main_region_traffic_light_traffic_lights_handling_normal_behavior_r1green_exit_logic_exit_timer_resetter,
			main_region_traffic_light_traffic_lights_handling_normal_behavior_r1yellow,
			main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed,
			main_region_traffic_light_toggle_button_handling_pressed_short,
			main_region_traffic_light_toggle_button_handling_pressed_long,
			null_state
		) = range(13)
	
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		
		self.button_pressed = None
		self.button_released = None
		self.car_detected = None
		self.set_led = None
		self.set_led_value = None
		self.set_led_observable = Observable()
		self.set_red = None
		self.set_red_value = None
		self.set_red_observable = Observable()
		self.set_green = None
		self.set_green_value = None
		self.set_green_observable = Observable()
		self.set_yellow = None
		self.set_yellow_value = None
		self.set_yellow_observable = Observable()
		
		self.__internal_event_queue = queue.Queue()
		self.in_event_queue = queue.Queue()
		self.__is_smart_mode = None
		self.interrupt = None
		
		# enumeration of all states:
		self.__State = Statechart.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 2
		for __state_index in range(2):
			self.__state_vector[__state_index] = self.State.null_state
		
		# for timed statechart:
		self.timer_service = None
		self.__time_events = [None] * 7
		
		# initializations:
		#Default init sequence for statechart Statechart
		self.__is_smart_mode = False
		self.__is_executing = False
		self.__state_conf_vector_position = None
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state or self.__state_vector[1] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False
			
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_traffic_light:
			return (self.__state_vector[0] >= self.__State.main_region_traffic_light)\
				and (self.__state_vector[0] <= self.__State.main_region_traffic_light_toggle_button_handling_pressed_long)
		if s == self.__State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior:
			return (self.__state_vector[0] >= self.__State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior)\
				and (self.__state_vector[0] <= self.__State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_off)
		if s == self.__State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_on:
			return self.__state_vector[0] == self.__State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_on
		if s == self.__State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_off:
			return self.__state_vector[0] == self.__State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_off
		if s == self.__State.main_region_traffic_light_traffic_lights_handling_normal_behavior:
			return (self.__state_vector[0] >= self.__State.main_region_traffic_light_traffic_lights_handling_normal_behavior)\
				and (self.__state_vector[0] <= self.__State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1yellow)
		if s == self.__State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1red:
			return self.__state_vector[0] == self.__State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1red
		if s == self.__State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1green:
			return (self.__state_vector[0] >= self.__State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1green)\
				and (self.__state_vector[0] <= self.__State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1green_exit_logic_exit_timer_resetter)
		if s == self.__State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1green_exit_logic_exit_timer_resetter:
			return self.__state_vector[0] == self.__State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1green_exit_logic_exit_timer_resetter
		if s == self.__State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1yellow:
			return self.__state_vector[0] == self.__State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1yellow
		if s == self.__State.main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed:
			return self.__state_vector[1] == self.__State.main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed
		if s == self.__State.main_region_traffic_light_toggle_button_handling_pressed_short:
			return self.__state_vector[1] == self.__State.main_region_traffic_light_toggle_button_handling_pressed_short
		if s == self.__State.main_region_traffic_light_toggle_button_handling_pressed_long:
			return self.__state_vector[1] == self.__State.main_region_traffic_light_toggle_button_handling_pressed_long
		return False
		
	def time_elapsed(self, event_id):
		"""Add time events to in event queue
		"""
		if event_id in range(7):
			self.in_event_queue.put(lambda: self.raise_time_event(event_id))
			self.run_cycle()
	
	def raise_time_event(self, event_id):
		"""Raise timed events using the event_id.
		"""
		self.__time_events[event_id] = True
	
	def __execute_queued_event(self, func):
		func()
	
	def __get_next_event(self):
		if not self.__internal_event_queue.empty():
			return self.__internal_event_queue.get()
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None
	
	
	def raise_interrupt(self):
		"""Raise method for event interrupt.
		"""
		self.__internal_event_queue.put(self.__raise_interrupt_call)
	
	def __raise_interrupt_call(self):
		"""Raise callback for event interrupt.
		"""
		self.interrupt = True
	
	def raise_button_pressed(self):
		"""Raise method for event button_pressed.
		"""
		self.in_event_queue.put(self.__raise_button_pressed_call)
		self.run_cycle()
	
	def __raise_button_pressed_call(self):
		"""Raise callback for event button_pressed.
		"""
		self.button_pressed = True
	
	def raise_button_released(self):
		"""Raise method for event button_released.
		"""
		self.in_event_queue.put(self.__raise_button_released_call)
		self.run_cycle()
	
	def __raise_button_released_call(self):
		"""Raise callback for event button_released.
		"""
		self.button_released = True
	
	def raise_car_detected(self):
		"""Raise method for event car_detected.
		"""
		self.in_event_queue.put(self.__raise_car_detected_call)
		self.run_cycle()
	
	def __raise_car_detected_call(self):
		"""Raise callback for event car_detected.
		"""
		self.car_detected = True
	
	def __entry_action_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on(self):
		"""Entry action for state 'YellowOn'..
		"""
		#Entry action for state 'YellowOn'.
		self.timer_service.set_timer(self, 0, 500, False)
		self.set_yellow_observable.next(True)
		
	def __entry_action_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off(self):
		"""Entry action for state 'YellowOff'..
		"""
		#Entry action for state 'YellowOff'.
		self.timer_service.set_timer(self, 1, 500, False)
		self.set_yellow_observable.next(False)
		
	def __entry_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red(self):
		"""Entry action for state 'red'..
		"""
		#Entry action for state 'red'.
		self.timer_service.set_timer(self, 2, (2 * 1000), False)
		self.set_red_observable.next(True)
		
	def __entry_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green(self):
		"""Entry action for state 'green'..
		"""
		#Entry action for state 'green'.
		self.timer_service.set_timer(self, 3, (5 * 1000), False)
		self.set_green_observable.next(True)
		
	def __entry_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter(self):
		"""Entry action for state 'exitTimerResetter'..
		"""
		#Entry action for state 'exitTimerResetter'.
		self.timer_service.set_timer(self, 4, (2 * 1000), False)
		
	def __entry_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow(self):
		"""Entry action for state 'yellow'..
		"""
		#Entry action for state 'yellow'.
		self.timer_service.set_timer(self, 5, (1 * 1000), False)
		self.set_yellow_observable.next(True)
		
	def __entry_action_main_region_traffic_light_toggle_button_handling_pressed_short(self):
		"""Entry action for state 'PressedShort'..
		"""
		#Entry action for state 'PressedShort'.
		self.timer_service.set_timer(self, 6, (2 * 1000), False)
		
	def __exit_action_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior(self):
		"""Exit action for state 'PoliceInterruptBehavior'..
		"""
		#Exit action for state 'PoliceInterruptBehavior'.
		self.set_yellow_observable.next(False)
		
	def __exit_action_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on(self):
		"""Exit action for state 'YellowOn'..
		"""
		#Exit action for state 'YellowOn'.
		self.timer_service.unset_timer(self, 0)
		
	def __exit_action_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off(self):
		"""Exit action for state 'YellowOff'..
		"""
		#Exit action for state 'YellowOff'.
		self.timer_service.unset_timer(self, 1)
		
	def __exit_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red(self):
		"""Exit action for state 'red'..
		"""
		#Exit action for state 'red'.
		self.timer_service.unset_timer(self, 2)
		self.set_red_observable.next(False)
		
	def __exit_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green(self):
		"""Exit action for state 'green'..
		"""
		#Exit action for state 'green'.
		self.timer_service.unset_timer(self, 3)
		self.set_green_observable.next(False)
		
	def __exit_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter(self):
		"""Exit action for state 'exitTimerResetter'..
		"""
		#Exit action for state 'exitTimerResetter'.
		self.timer_service.unset_timer(self, 4)
		
	def __exit_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow(self):
		"""Exit action for state 'yellow'..
		"""
		#Exit action for state 'yellow'.
		self.timer_service.unset_timer(self, 5)
		self.set_yellow_observable.next(False)
		
	def __exit_action_main_region_traffic_light_toggle_button_handling_pressed_short(self):
		"""Exit action for state 'PressedShort'..
		"""
		#Exit action for state 'PressedShort'.
		self.timer_service.unset_timer(self, 6)
		
	def __enter_sequence_main_region_traffic_light_default(self):
		"""'default' enter sequence for state TrafficLight.
		"""
		#'default' enter sequence for state TrafficLight
		self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_default()
		self.__enter_sequence_main_region_traffic_light_toggle_button_handling_default()
		
	def __enter_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_default(self):
		"""'default' enter sequence for state PoliceInterruptBehavior.
		"""
		#'default' enter sequence for state PoliceInterruptBehavior
		self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_default()
		
	def __enter_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on_default(self):
		"""'default' enter sequence for state YellowOn.
		"""
		#'default' enter sequence for state YellowOn
		self.__entry_action_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on()
		self.__state_vector[0] = self.State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_on
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off_default(self):
		"""'default' enter sequence for state YellowOff.
		"""
		#'default' enter sequence for state YellowOff
		self.__entry_action_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off()
		self.__state_vector[0] = self.State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_off
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_default(self):
		"""'default' enter sequence for state NormalBehavior.
		"""
		#'default' enter sequence for state NormalBehavior
		self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_default()
		
	def __enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red_default(self):
		"""'default' enter sequence for state red.
		"""
		#'default' enter sequence for state red
		self.__entry_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red()
		self.__state_vector[0] = self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1red
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_default(self):
		"""'default' enter sequence for state green.
		"""
		#'default' enter sequence for state green
		self.__entry_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green()
		self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_default()
		
	def __enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter_default(self):
		"""'default' enter sequence for state exitTimerResetter.
		"""
		#'default' enter sequence for state exitTimerResetter
		self.__entry_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter()
		self.__state_vector[0] = self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1green_exit_logic_exit_timer_resetter
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow_default(self):
		"""'default' enter sequence for state yellow.
		"""
		#'default' enter sequence for state yellow
		self.__entry_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow()
		self.__state_vector[0] = self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1yellow
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed_default(self):
		"""'default' enter sequence for state ToggleModeUnpressed.
		"""
		#'default' enter sequence for state ToggleModeUnpressed
		self.__state_vector[1] = self.State.main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_traffic_light_toggle_button_handling_pressed_short_default(self):
		"""'default' enter sequence for state PressedShort.
		"""
		#'default' enter sequence for state PressedShort
		self.__entry_action_main_region_traffic_light_toggle_button_handling_pressed_short()
		self.__state_vector[1] = self.State.main_region_traffic_light_toggle_button_handling_pressed_short
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_traffic_light_toggle_button_handling_pressed_long_default(self):
		"""'default' enter sequence for state PressedLong.
		"""
		#'default' enter sequence for state PressedLong
		self.__state_vector[1] = self.State.main_region_traffic_light_toggle_button_handling_pressed_long
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main region.
		"""
		#'default' enter sequence for region main region
		self.__react_main_region__entry_default()
		
	def __enter_sequence_main_region_traffic_light_traffic_lights_handling_default(self):
		"""'default' enter sequence for region trafficLightsHandling.
		"""
		#'default' enter sequence for region trafficLightsHandling
		self.__react_main_region_traffic_light_traffic_lights_handling__entry_default()
		
	def __enter_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		#'default' enter sequence for region r1
		self.__react_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1__entry_default()
		
	def __enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		#'default' enter sequence for region r1
		self.__react_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1__entry_default()
		
	def __enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_default(self):
		"""'default' enter sequence for region exitLogic.
		"""
		#'default' enter sequence for region exitLogic
		self.__react_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic__entry_default()
		
	def __enter_sequence_main_region_traffic_light_toggle_button_handling_default(self):
		"""'default' enter sequence for region toggleButtonHandling.
		"""
		#'default' enter sequence for region toggleButtonHandling
		self.__react_main_region_traffic_light_toggle_button_handling__entry_default()
		
	def __exit_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior(self):
		"""Default exit sequence for state PoliceInterruptBehavior.
		"""
		#Default exit sequence for state PoliceInterruptBehavior
		self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1()
		self.__exit_action_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior()
		
	def __exit_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on(self):
		"""Default exit sequence for state YellowOn.
		"""
		#Default exit sequence for state YellowOn
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on()
		
	def __exit_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off(self):
		"""Default exit sequence for state YellowOff.
		"""
		#Default exit sequence for state YellowOff
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off()
		
	def __exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior(self):
		"""Default exit sequence for state NormalBehavior.
		"""
		#Default exit sequence for state NormalBehavior
		self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1()
		
	def __exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red(self):
		"""Default exit sequence for state red.
		"""
		#Default exit sequence for state red
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red()
		
	def __exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green(self):
		"""Default exit sequence for state green.
		"""
		#Default exit sequence for state green
		self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic()
		self.__exit_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green()
		
	def __exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter(self):
		"""Default exit sequence for state exitTimerResetter.
		"""
		#Default exit sequence for state exitTimerResetter
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter()
		
	def __exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow(self):
		"""Default exit sequence for state yellow.
		"""
		#Default exit sequence for state yellow
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow()
		
	def __exit_sequence_main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed(self):
		"""Default exit sequence for state ToggleModeUnpressed.
		"""
		#Default exit sequence for state ToggleModeUnpressed
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_traffic_light_toggle_button_handling_pressed_short(self):
		"""Default exit sequence for state PressedShort.
		"""
		#Default exit sequence for state PressedShort
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_main_region_traffic_light_toggle_button_handling_pressed_short()
		
	def __exit_sequence_main_region_traffic_light_toggle_button_handling_pressed_long(self):
		"""Default exit sequence for state PressedLong.
		"""
		#Default exit sequence for state PressedLong
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main region.
		"""
		#Default exit sequence for region main region
		state = self.__state_vector[0]
		if state == self.State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_on:
			self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on()
			self.__exit_action_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior()
		elif state == self.State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_off:
			self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off()
			self.__exit_action_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior()
		elif state == self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1red:
			self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red()
		elif state == self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1green_exit_logic_exit_timer_resetter:
			self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter()
			self.__exit_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green()
		elif state == self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1yellow:
			self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow()
		state = self.__state_vector[1]
		if state == self.State.main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed:
			self.__exit_sequence_main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed()
		elif state == self.State.main_region_traffic_light_toggle_button_handling_pressed_short:
			self.__exit_sequence_main_region_traffic_light_toggle_button_handling_pressed_short()
		elif state == self.State.main_region_traffic_light_toggle_button_handling_pressed_long:
			self.__exit_sequence_main_region_traffic_light_toggle_button_handling_pressed_long()
		
	def __exit_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1(self):
		"""Default exit sequence for region r1.
		"""
		#Default exit sequence for region r1
		state = self.__state_vector[0]
		if state == self.State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_on:
			self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on()
		elif state == self.State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_off:
			self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off()
		
	def __exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1(self):
		"""Default exit sequence for region r1.
		"""
		#Default exit sequence for region r1
		state = self.__state_vector[0]
		if state == self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1red:
			self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red()
		elif state == self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1green_exit_logic_exit_timer_resetter:
			self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter()
			self.__exit_action_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green()
		elif state == self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1yellow:
			self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow()
		
	def __exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic(self):
		"""Default exit sequence for region exitLogic.
		"""
		#Default exit sequence for region exitLogic
		state = self.__state_vector[0]
		if state == self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1green_exit_logic_exit_timer_resetter:
			self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter()
		
	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_traffic_light_default()
		
	def __react_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on_default()
		
	def __react_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter_default()
		
	def __react_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red_default()
		
	def __react_main_region_traffic_light_traffic_lights_handling__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_default()
		
	def __react_main_region_traffic_light_toggle_button_handling__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry 
		self.__enter_sequence_main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		#State machine reactions.
		return transitioned_before
	
	
	def __main_region_traffic_light_react(self, transitioned_before):
		"""Implementation of __main_region_traffic_light_react function.
		"""
		#The reactions of state TrafficLight.
		return self.__react(transitioned_before)
	
	
	def __main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_react(self, transitioned_before):
		"""Implementation of __main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_react function.
		"""
		#The reactions of state PoliceInterruptBehavior.
		transitioned_after = self.__main_region_traffic_light_react(transitioned_before)
		if transitioned_after < 0:
			if self.interrupt:
				self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior()
				self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on_react(self, transitioned_before):
		"""Implementation of __main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on_react function.
		"""
		#The reactions of state YellowOn.
		transitioned_after = self.__main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_react(transitioned_before)
		if transitioned_after < 0:
			if self.__time_events[0]:
				self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on()
				self.__time_events[0] = False
				self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off_react(self, transitioned_before):
		"""Implementation of __main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off_react function.
		"""
		#The reactions of state YellowOff.
		transitioned_after = self.__main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_react(transitioned_before)
		if transitioned_after < 0:
			if self.__time_events[1]:
				self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off()
				self.__time_events[1] = False
				self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_traffic_light_traffic_lights_handling_normal_behavior_react(self, transitioned_before):
		"""Implementation of __main_region_traffic_light_traffic_lights_handling_normal_behavior_react function.
		"""
		#The reactions of state NormalBehavior.
		transitioned_after = self.__main_region_traffic_light_react(transitioned_before)
		if transitioned_after < 0:
			if self.interrupt:
				self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior()
				self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red_react(self, transitioned_before):
		"""Implementation of __main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red_react function.
		"""
		#The reactions of state red.
		transitioned_after = self.__main_region_traffic_light_traffic_lights_handling_normal_behavior_react(transitioned_before)
		if transitioned_after < 0:
			if self.__time_events[2]:
				self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red()
				self.__time_events[2] = False
				self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_react(self, transitioned_before):
		"""Implementation of __main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_react function.
		"""
		#The reactions of state green.
		transitioned_after = self.__main_region_traffic_light_traffic_lights_handling_normal_behavior_react(transitioned_before)
		if transitioned_after < 0:
			if self.__time_events[3]:
				self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green()
				self.__time_events[3] = False
				self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter_react(self, transitioned_before):
		"""Implementation of __main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter_react function.
		"""
		#The reactions of state exitTimerResetter.
		transitioned_after = self.__main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_react(transitioned_before)
		if transitioned_after < 0:
			if self.__time_events[4]:
				self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green()
				self.__time_events[4] = False
				self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow_default()
				transitioned_after = 0
			elif (self.car_detected) and (self.__is_smart_mode):
				self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter()
				self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow_react(self, transitioned_before):
		"""Implementation of __main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow_react function.
		"""
		#The reactions of state yellow.
		transitioned_after = self.__main_region_traffic_light_traffic_lights_handling_normal_behavior_react(transitioned_before)
		if transitioned_after < 0:
			if self.__time_events[5]:
				self.__exit_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow()
				self.__time_events[5] = False
				self.__enter_sequence_main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed_react(self, transitioned_before):
		"""Implementation of __main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed_react function.
		"""
		#The reactions of state ToggleModeUnpressed.
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.button_pressed:
				self.__exit_sequence_main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed()
				self.__enter_sequence_main_region_traffic_light_toggle_button_handling_pressed_short_default()
				transitioned_after = 1
		return transitioned_after
	
	
	def __main_region_traffic_light_toggle_button_handling_pressed_short_react(self, transitioned_before):
		"""Implementation of __main_region_traffic_light_toggle_button_handling_pressed_short_react function.
		"""
		#The reactions of state PressedShort.
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.button_released:
				self.__exit_sequence_main_region_traffic_light_toggle_button_handling_pressed_short()
				self.__is_smart_mode = not self.__is_smart_mode
				self.set_led_observable.next(self.__is_smart_mode)
				self.__enter_sequence_main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed_default()
				transitioned_after = 1
			elif self.__time_events[6]:
				self.__exit_sequence_main_region_traffic_light_toggle_button_handling_pressed_short()
				self.__time_events[6] = False
				self.__enter_sequence_main_region_traffic_light_toggle_button_handling_pressed_long_default()
				transitioned_after = 1
		return transitioned_after
	
	
	def __main_region_traffic_light_toggle_button_handling_pressed_long_react(self, transitioned_before):
		"""Implementation of __main_region_traffic_light_toggle_button_handling_pressed_long_react function.
		"""
		#The reactions of state PressedLong.
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.button_released:
				self.__exit_sequence_main_region_traffic_light_toggle_button_handling_pressed_long()
				self.raise_interrupt()
				self.__enter_sequence_main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed_default()
				transitioned_after = 1
		return transitioned_after
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.button_pressed = False
		self.button_released = False
		self.car_detected = False
		self.__time_events[0] = False
		self.__time_events[1] = False
		self.__time_events[2] = False
		self.__time_events[3] = False
		self.__time_events[4] = False
		self.__time_events[5] = False
		self.__time_events[6] = False
	
	
	def __clear_internal_events(self):
		"""Implementation of __clear_internal_events function.
		"""
		self.interrupt = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		transitioned = -1
		self.__state_conf_vector_position = 0
		state = self.__state_vector[0]
		if state == self.State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_on:
			transitioned = self.__main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_on_react(transitioned)
		elif state == self.State.main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1yellow_off:
			transitioned = self.__main_region_traffic_light_traffic_lights_handling_police_interrupt_behavior_r1_yellow_off_react(transitioned)
		elif state == self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1red:
			transitioned = self.__main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_red_react(transitioned)
		elif state == self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1green_exit_logic_exit_timer_resetter:
			transitioned = self.__main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_green_exit_logic_exit_timer_resetter_react(transitioned)
		elif state == self.State.main_region_traffic_light_traffic_lights_handling_normal_behavior_r1yellow:
			transitioned = self.__main_region_traffic_light_traffic_lights_handling_normal_behavior_r1_yellow_react(transitioned)
		if self.__state_conf_vector_position < 1:
			state = self.__state_vector[1]
			if state == self.State.main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed:
				self.__main_region_traffic_light_toggle_button_handling_toggle_mode_unpressed_react(transitioned)
			elif state == self.State.main_region_traffic_light_toggle_button_handling_pressed_short:
				self.__main_region_traffic_light_toggle_button_handling_pressed_short_react(transitioned)
			elif state == self.State.main_region_traffic_light_toggle_button_handling_pressed_long:
				self.__main_region_traffic_light_toggle_button_handling_pressed_long_react(transitioned)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		#Performs a 'run to completion' step.
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__micro_step()
			self.__clear_in_events()
			self.__clear_internal_events()
			condition_0 = False
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
				condition_0 = True
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		#Activates the state machine.
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		#Default enter sequence for statechart Statechart
		self.__enter_sequence_main_region_default()
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		#Deactivates the state machine.
		if self.__is_executing:
			return
		self.__is_executing = True
		#Default exit sequence for statechart Statechart
		self.__exit_sequence_main_region()
		self.__is_executing = False
	
	
	def trigger_without_event(self):
		"""Implementation of triggerWithoutEvent function.
		"""
		self.run_cycle()
	
